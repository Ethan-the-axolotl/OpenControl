@name OpenControl/Diesel-Electric-Processor
@inputs Locomotive:entity HandBrake [LOCOMOTIVE_AIRBRAKE_DATA CONTROL_STAND_DATA CONFIGURATION_DATA ENGINE_SOUND_DATA Trucks SpanBolsters]:array
@outputs [LOCOMOTIVE_PROCESSOR]:array
@outputs Load MPH KPH DynamicBrakeWarning GroundRelay BE BEAuto Force TE CarCount Current MotorTemp DynamicTemp TrainWeight BEF BEAutoF TELocal BEForce WheelSlip SlippingFactor
@persist [E O W]:entity [SmoothTable]:table LastProps:array CEMF R MainGeneratorVoltage MaxGeneratorVoltage MotorVoltage CircuitType CurrentBO Current DBCurrent Load
@persist TE V BHQ Braking_Train Braking_Loco BrakeMul MaxTrainBrakeForce Holding TE_Effective TE_EffectiveLoad AutoMux CarCount BEVLB TrainWeight
@persist DynamicTemp MotorTemp DynamicShort MotorShort GroundRelay DBArking TMArking FixNils RampedMotorVoltage EngineRPMCal DynoHPINCR FBWD FFWD
@persist Motors MaxGeneratorCurrent MaxTractionMotorCurrent MaxContinuousTractionMotorCurrent MaxDynamicCurrent MaxContinuousDynamicCurrent EngineIdleRPM EngineRedlineRPM NumNotches Axles
@persist Horsepower Weight BaseSpeed TopSpeed ClaspBrakes [AlarmBellStart AlarmBellEnd]:string Adhesion WeightOnAxle TE_Starting Dynamics LowSpeedCurve SlippingFactor
@trigger none
@model

if(dupefinished() | duped()){ reset() }
if(first()){ 
    
    E = entity()
    O = owner()
    W = E:isWeldedTo()
    
    Motors = CONFIGURATION_DATA[34,number]
    MaxGeneratorCurrent = CONFIGURATION_DATA[33,number]
    MaxTractionMotorCurrent = CONFIGURATION_DATA[36,number]
    MaxContinuousTractionMotorCurrent = CONFIGURATION_DATA[37,number]
    MaxDynamicCurrent = CONFIGURATION_DATA[39,number]
    MaxContinuousDynamicCurrent = CONFIGURATION_DATA[40,number]
    EngineIdleRPM = CONFIGURATION_DATA[41,number]
    EngineRedlineRPM = CONFIGURATION_DATA[42,number]
    NumNotches = CONFIGURATION_DATA[43,number]
    Axles = CONFIGURATION_DATA[35,number]
    Horsepower = CONFIGURATION_DATA[44,number]
    Weight = CONFIGURATION_DATA[45,number]
    BaseSpeed = CONFIGURATION_DATA[46,number]
    TopSpeed = CONFIGURATION_DATA[47,number]
    ClaspBrakes = CONFIGURATION_DATA[48,number]
    AlarmBellStart = CONFIGURATION_DATA[32,string]
    AlarmBellEnd = CONFIGURATION_DATA[49,string]
    Adhesion = CONFIGURATION_DATA[53,number]
    
    MainGeneratorVoltage = 0
    MaxGeneratorVoltage = 1500
    CircuitType = 4
    R = 0
    Current = 0
    Force = 0
    Load = 0
    CEMF = 0
    MotorVoltage = 0
    RampedMotorVoltage = 0
    
    BrakeMul = (775*2)
    MaxTrainBrakeForce = 0
    Holding = 0
    AutoMux = 1
    BHQ = 0
    CarCount = 0
    DynamicTemp = 0
    MotorTemp = 0
    DynamicBrakeWarning = 0
    DynamicShort = 0
    MotorShort = 0
    GroundRelay = 0
    DBArking = 0
    TMArking = 0
    FixNils = 0
    EngineRPMCal = 0
    Dynamics = 0
    
    WeightOnAxle = Weight/Axles
    TE_Starting = WeightOnAxle*Adhesion
    
    function number getWeatherCondition(){
        return 0.5
    }
    
    function number smooth(Var,SmoothAmount,ID:string,DefaultVal){
        if(!SmoothTable:exists(ID)){
            SmoothTable[ID,number] = DefaultVal
        }
        local Smooth = SmoothTable[ID,number]    
        Smooth += (Var-Smooth) / SmoothAmount
        SmoothTable[ID,number] = Smooth
        return Smooth
    }
    
    function number carCount(BP_Anglecock){
        local Cars = 0
        if(BP_Anglecock){
            Cars = 0
        }
        else{
            local Props = E:getConstraints()
            local Cnt = 0
            local ImportantProps = array()
            foreach(K,V:entity = Props){
                if(V:mass()>1000){
                    ImportantProps[Cnt,entity] = V
                    Cnt++
                }
            }
            local ExtraProps = ImportantProps:count()
            Cars = floor(ExtraProps/3)
            if(Cars<0){Cars = 0}
            
        }
        MaxTrainBrakeForce = BrakeMul*(Cars-1)*0.5
        if(MaxTrainBrakeForce<0){MaxTrainBrakeForce = 0}
        return Cars
        
    }
    
    function number trainWeight(){
        local WeightProps = E:getConstraints()
        local TotalMass = 0
        foreach(K,V:entity=WeightProps){
            TotalMass += V:mass()
        }
        return TotalMass
    }
    
    function void abRelease(){
        local Ents = E:getConstraints()
        foreach(K,V:entity=Ents){
            V:propPhysicalMaterial("friction_00")
            V:propDrag(0)
        }
        return void
    }
    
    function void abRest(Ents:array){
        foreach(K,V:entity=Ents){
            V:propPhysicalMaterial("phx_tire_normal")
        }
        return void
    }
    
    function void setWeight(Carbody:entity,Bolsters:array,Trucks:array,Pounds){
        local KG = fromUnit("lb",Pounds/2)
        local CarbodyWeight = clamp(round(KG/2),10,50000)
        
        Carbody:setMass(CarbodyWeight)
        KG -= CarbodyWeight
        
        if(Bolsters:count()>0){
            local BolsterWgt = round(KG/(Bolsters:count()*2))
            for(N=1,Bolsters:count()){
                Bolsters[N,entity]:setMass(BolsterWgt)
            }
            KG -= BolsterWgt*Bolsters:count()
        }
        
        
        local TruckWgt = round(KG/Trucks:count())
        for(N=1,Trucks:count()){
            Trucks[N,entity]:setMass(TruckWgt)
        }
    
        
        return void
    }
    
    setWeight(W,SpanBolsters,Trucks,Weight)
    timer("checkcars",5000)
    timer("fixnil",1000) 
}

if(CONTROL_STAND_DATA[19,number]){
    interval(150)
}


if(clk("checkcars")){
    CarCount = carCount(!LOCOMOTIVE_AIRBRAKE_DATA[11,number])
    TrainWeight = trainWeight()
    timer("checkcars",5000)
    LastProps = E:getConstraints()
}

if(ENGINE_SOUND_DATA[7,number] | ENGINE_SOUND_DATA[8,number]){
    EngineRPMCal = (((EngineRedlineRPM-EngineIdleRPM)/NumNotches)*ENGINE_SOUND_DATA[10,number])
}
else{    
    EngineRPMCal = 0
}

local EngineRPMSmoothed = smooth(EngineRPMCal,15,"engine_rpm_smoothing",0)
EngineRPM = EngineRPMSmoothed+EngineIdleRPM

V = -E:velL():z()
MPH = toUnit("mph",abs(V))*4/3
KPH = toUnit("km/h",abs(V))*4/3

local HasSelector = CONFIGURATION_DATA[2,number]

if(HasSelector){
    if(CONTROL_STAND_DATA[29,number] == 0){
        CircuitType = 0
    }
    elseif(CONTROL_STAND_DATA[29,number] == 1){
        CircuitType = 1
    }
    elseif(CONTROL_STAND_DATA[29,number] == 2){
        CircuitType = 2
    }
    elseif(CONTROL_STAND_DATA[29,number] == 3){
        CircuitType = 3
    }
    elseif(CONTROL_STAND_DATA[29,number] == 4){
        CircuitType = 4
    }
    elseif(CONTROL_STAND_DATA[29,number] == 5){
        CircuitType = 4
    }
}

if(CONTROL_STAND_DATA[24,number] == 1){
    if(CONTROL_STAND_DATA[18,number]>0){
        GenEngineRPM = EngineRPMSmoothed+EngineIdleRPM
        MainGeneratorVoltage = (MaxGeneratorVoltage/(EngineRedlineRPM/GenEngineRPM))
        MotorVoltage = MainGeneratorVoltage
    }
    elseif(CONTROL_STAND_DATA[18,number] == 0){
        GenEngineRPM = EngineIdleRPM
        MainGeneratorVoltage = GenEngineRPM
        MotorVoltage = (CircuitType*CEMF)
    }
    
    if(CONTROL_STAND_DATA[18,number]>0){
        if(CONTROL_STAND_DATA[21,number]>0){
            RampedMotorVoltage = MotorVoltage #smooth(MotorVoltage,5,"uh",0)
        }
        else{
            RampedMotorVoltage = 0    
        }
    }
    else{
        RampedMotorVoltage = 0    
    }
}
else{
    RampedMotorVoltage = 0    
}

if(HasSelector == 0){
    if(CONTROL_STAND_DATA[19,number] == 1){
        if(CONTROL_STAND_DATA[21,number] == 1){
            if(CONTROL_STAND_DATA[24,number] == 1){
                if(CONTROL_STAND_DATA[16,number] != 0){
                    if(CONTROL_STAND_DATA[12,number] == 0){
                        if(CONTROL_STAND_DATA[18,number]>0){
                            local CurrentNR = (RampedMotorVoltage - (CircuitType*CEMF))
                            CEMF = 5+(MPH/(Horsepower/MaxGeneratorCurrent))
                            R = RampedMotorVoltage/CurrentNR
                            
                            if(!MotorShort & !GroundRelay){
                                CurrentBO = (CurrentNR/R)
                            }
                            elseif(MotorShort | GroundRelay){
                                CurrentBO = 0
                            }
                        }
                        elseif(CONTROL_STAND_DATA[18,number] == 0){
                            CurrentBO = 0    
                        }
                    }
                    elseif(CONTROL_STAND_DATA[12,number] == 2){
                        if(CONTROL_STAND_DATA[18,number] == 0){
                            Dynamics = 1
                            local GRID_RESISTOR_OHMS = 0.923
                            local WheelDiameter = 40
                            local WheelCircumference = WheelDiameter*pi()
                            local IPH = MPH*(12*5280)
                            local AxleRPM = (IPH/60)/WheelCircumference
                            
                            CEMF = 0+(MPH/TopSpeed)
                            
                            local DBMotorVoltage = ((AxleRPM/MaxDynamicCurrent)*CONTROL_STAND_DATA[14,number])*100
                            local DBMotorCurrent = ((DBMotorVoltage-CircuitType) * CEMF)
                            
                            if(!DynamicShort & !GroundRelay){
                                CurrentBO = -(DBMotorCurrent/(GRID_RESISTOR_OHMS))*2.5
                            }
                            elseif(DynamicShort | GroundRelay){
                                CurrentBO = 0
                            }
                        }
                    }
                    elseif(CONTROL_STAND_DATA[12,number]<2){
                        CurrentBO = 0       
                    }
                }
                else{
                    CurrentBO = 0  
                    Current = 0     
                    TE = 0
                }
            }
            else{
                CurrentBO = 0  
                Current = 0     
                TE = 0
            }
        }
        else{
            CurrentBO = 0  
            Current = 0     
            TE = 0
        }
    }
    else{
        CurrentBO = 0  
        Current = 0     
        TE = 0
    }
}
elseif(HasSelector == 1){
    if(CONTROL_STAND_DATA[19,number] == 1){
        if(CONTROL_STAND_DATA[21,number] == 1){
            if(CONTROL_STAND_DATA[24,number] == 1){
                if(CONTROL_STAND_DATA[16,number] != 0){
                    if(CONTROL_STAND_DATA[29,number] > 0){
                        if(CONTROL_STAND_DATA[18,number]>0){
                            local CurrentNR = (RampedMotorVoltage - (CircuitType*CEMF))
                            CEMF = 5+(MPH/(Horsepower/MaxGeneratorCurrent))
                            R = RampedMotorVoltage/CurrentNR
                            
                            if(!MotorShort & !GroundRelay){
                                CurrentBO = (CurrentNR/R)
                            }
                            elseif(MotorShort | GroundRelay){
                                CurrentBO = 0
                            }
                        }
                        elseif(CONTROL_STAND_DATA[18,number] == 0){
                            CurrentBO = 0    
                        }
                    }
                    elseif(CONTROL_STAND_DATA[29,number] == 5){
                        Dynamics = 1
                        local GRID_RESISTOR_OHMS = 0.923
                        local WheelDiameter = 40
                        local WheelCircumference = WheelDiameter*pi()
                        local IPH = MPH*(12*5280)
                        local AxleRPM = (IPH/60)/WheelCircumference

                        CEMF = 0+(MPH/TopSpeed)
                        
                        local DBMotorVoltage = ((AxleRPM/MaxDynamicCurrent)*(CONTROL_STAND_DATA[18,number]*10))*100
                        local DBMotorCurrent = ((DBMotorVoltage-CircuitType) * CEMF)
                        
                        if(!DynamicShort & !GroundRelay){
                            CurrentBO = -(DBMotorCurrent/(GRID_RESISTOR_OHMS))*2.5
                        }
                        elseif(DynamicShort | GroundRelay){
                            CurrentBO = 0
                        }
                    }
                    elseif(CONTROL_STAND_DATA[29,number] == 0){
                        CurrentBO = 0
                        Current = 0 
                        TE = 0
                    }
                }
                else{
                    CurrentBO = 0  
                    Current = 0     
                    TE = 0
                }
            }
            else{
                CurrentBO = 0  
                Current = 0     
                TE = 0
            }
        }
        else{
            CurrentBO = 0  
            Current = 0     
            TE = 0
        }
    }
    else{
        CurrentBO = 0  
        Current = 0     
        TE = 0
    }
}

if(inrange(CurrentBO,-MaxDynamicCurrent,MaxTractionMotorCurrent)){
    Current = CurrentBO  
}
elseif(CurrentBO>MaxTractionMotorCurrent){
    Current = MaxTractionMotorCurrent
}
elseif(CurrentBO<-MaxDynamicCurrent){
    Current = -MaxDynamicCurrent
}

if(CONTROL_STAND_DATA[16,number] != 0){
    if(CONTROL_STAND_DATA[12,number]>0){
        if(!DynamicShort){
            if(Current<(-MaxContinuousDynamicCurrent)){
                DynamicTemp += (Current/100)
                DynamicBrakeWarning = 1
            }
    
            if(DynamicTemp>150 & DynamicTemp<450){
                DBArking = 1
                if(changed(DBArking)&DBArking){
                    soundPlay("DB-Arking",0,"gsgtrainsounds/misc/electrical_arking.wav")
                    print("Warning your Dynmaics becoming overheated! Reduce your dynmaics to: "+MaxContinuousDynamicCurrent+" Amps or further damage will occour.")
                }
            }
        }
    
        if(DynamicTemp>450){
            DynamicShort = 1
            local DBShort = 1
            if(changed(DBShort)&DBShort){
                soundPlay("DB-Flashover",0,"ambient/energy/weld2.wav")
            }
            if(DBArking & GroundRelay){
                soundStop("DB-Arking",5)
                DBArking = 0
            }
        }
    }
}

soundVolume("DB-Arking",((DynamicTemp-150)/100))

if(CONTROL_STAND_DATA[16,number] != 0){
    if(CONTROL_STAND_DATA[12,number] == 0){
        if(CONTROL_STAND_DATA[18,number]>0){
            if(!MotorShort){
                if(Current>MaxContinuousTractionMotorCurrent){
                    MotorTemp += (Current/1000)
                }
    
                if(MotorTemp>1000 & MotorTemp<1500){
                    TMArking = 1
                    if(changed(TMArking)&TMArking){
                        soundPlay("TM-Arking",0,"gsgtrainsounds/misc/electrical_arking.wav")
                        print("Warning your Traction Motors becoming overheated! Reduce your throttle to: "+MaxContinuousTractionMotorCurrent+" Amps or further damage will occour.")
                    }
                }
            }
            
            if(MotorTemp>1500){
                MotorShort = 1
                local TMShort = 1
                if(changed(TMShort)&TMShort){
                    soundPlay("TM-Flashover",0,"ambient/energy/weld2.wav")
                }
                if(TMArking & GroundRelay){
                    soundStop("TM-Arking",5)
                    TMArking = 0
                }
            }
        }
    }
}

soundVolume("TM-Arking",((MotorTemp-1000)/300))

if(Current>-MaxContinuousDynamicCurrent){
    if(round(DynamicTemp)>0){
        DynamicTemp -= (CONTROL_STAND_DATA[12,number] ? 5 : 2)
    }
    if(DynamicTemp<0){
        DynamicTemp = 0
    }
    DynamicBrakeWarning = 0
}

if(Current<MaxContinuousTractionMotorCurrent){
    if(round(MotorTemp)>0){
        MotorTemp -= 5
    }
    if(MotorTemp<0){
        MotorTemp = 0
    }
}

if(changed(DynamicShort)&DynamicShort){
    GroundRelay = 1
}
if(changed(MotorShort)&MotorShort){
    GroundRelay = 1
}

if(changed(GroundRelay)&GroundRelay){
    W:soundPlay("LocomotiveAlarmBell",0,AlarmBellStart)
}
elseif(changed(CONTROL_STAND_DATA[25,number])&CONTROL_STAND_DATA[25,number]){
    GroundRelay = 0
    W:soundPlay("LocomotiveAlarmBell",0,AlarmBellEnd)
}


if(LOCOMOTIVE_AIRBRAKE_DATA[4,number]<10){
    BEVLB = 0
    BE = 0
}
elseif(LOCOMOTIVE_AIRBRAKE_DATA[4,number]>10){
    BEVLB = 40000*(abs((LOCOMOTIVE_AIRBRAKE_DATA[4,number]))/65)
    BE = (LOCOMOTIVE_AIRBRAKE_DATA[4,number]*(Holding ? 0 : BEVLB*(ClaspBrakes ? 1.25 : 1)))
}


if((Holding & round(LOCOMOTIVE_AIRBRAKE_DATA[3,number])<90)){
    AutoMux = 1    
}
elseif((!Holding & round(LOCOMOTIVE_AIRBRAKE_DATA[3,number])>89)){
    AutoMux = 0    
}

if(CONTROL_STAND_DATA[7,number] == 1){
    if(CONTROL_STAND_DATA[26,number] == 0){
        if(round(LOCOMOTIVE_AIRBRAKE_DATA[3,number])<89){
            if(MaxTrainBrakeForce == 0){
                BEAuto = ((round(LOCOMOTIVE_AIRBRAKE_DATA[3,number])-90)*(AutoMux ? 0 : 150000))/(CONTROL_STAND_DATA[6,number] ? 2.5 : 1.45)
            }
            elseif(MaxTrainBrakeForce>0){
                BEAuto = (MaxTrainBrakeForce*(round(LOCOMOTIVE_AIRBRAKE_DATA[3,number])-90)*(AutoMux ? 0 : 40))/(CONTROL_STAND_DATA[6,number] ? 2.5 : 1.45)
            }
        }
        elseif(round(LOCOMOTIVE_AIRBRAKE_DATA[3,number])>89){
            BEAuto = 0    
        }
    }
    elseif(CONTROL_STAND_DATA[26,number] == 1){
        BEAuto = 0    
    }
}
elseif(CONTROL_STAND_DATA[7,number] == 0){
    BEAuto = 0    
}

if((LOCOMOTIVE_AIRBRAKE_DATA[2,number]<85 & !BHQ & MPH<1.5)){
    Holding = 1
    BHQ = 1
    abRest(Trucks)
}

if((LOCOMOTIVE_AIRBRAKE_DATA[4,number]>10) & !BHQ & MPH<1.5){
    Holding = 1
    BHQ = 1
    abRest(Trucks)
}

if(HandBrake){
    Holding = 1
    BHQ = 1
    abRest(Trucks)    
}

local Overcome = (abs(TE) - BE)>0

if(((LOCOMOTIVE_AIRBRAKE_DATA[2,number]>85 & LOCOMOTIVE_AIRBRAKE_DATA[4,number]<10 & !HandBrake & BHQ))){
    Holding = 0
    BHQ = 0
    abRelease()
}
elseif(Overcome == 1){
    Holding = 0
    BHQ = 0
    abRelease()
}

if(clk("fixnil")){
    Load = 0
    TE = 0
    Force = 0
    FixNils = 1
    stoptimer("fixnil")
}

if(FixNils){
    if(Dynamics == 0){
        LowSpeedCurve = clamp(Current,Load-3,Load+3)
    }
    elseif(Dynamics == 1){
        LowSpeedCurve = 15
    }
    
    if(LowSpeedCurve > 300){
        LowSpeedCurve = 300
    }
    
    Load = clamp(Current,Load-(15),Load+(LowSpeedCurve/(Dynamics ? 1 : 10)))
    TE_EffectiveLoad = Load/(1+(round(-(LOCOMOTIVE_AIRBRAKE_DATA[3,number]-90))/90))
    TE_Effective = TE_EffectiveLoad
}

local FrictionCoefficient = getWeatherCondition()
local InperfectionFactor = 1.5
local SlipCoefficient = TE_Effective/WeightOnAxle*(TrainWeight/WeightOnAxle)
local FrictionFactor = (1+(round(-(LOCOMOTIVE_AIRBRAKE_DATA[3,number]-90))/90))
SlippingFactor = ((SlipCoefficient/(FrictionFactor^2))/(1+((MPH/BaseSpeed)/10)))*(random()*InperfectionFactor)

if(!MotorShort){
    if(Current>0){
        if(SlippingFactor > FrictionCoefficient){
            WheelSlip = 1
        }
        elseif(SlippingFactor < FrictionCoefficient){
            WheelSlip = 0
        }
    }
}

if(changed(WheelSlip)&WheelSlip){
    W:soundPlay("wheelsliploop",0,CONFIGURATION_DATA[56,string])
}
elseif(changed(WheelSlip)&!WheelSlip){
    soundStop("wheelsliploop")
    W:soundPlay("wheelslipend",0,CONFIGURATION_DATA[57,string])
}


if(MPH > BaseSpeed){
    TE = 0  
}
elseif(MPH < BaseSpeed){
    if(CONTROL_STAND_DATA[12,number] == 2){
        DynoHPINCR = 1.5
    }
    elseif(CONTROL_STAND_DATA[12,number]<2){
        DynoHPINCR = 1
    }
    TE = (TE_Effective*(BaseSpeed/TopSpeed)*Motors*MaxGeneratorCurrent/8)*(1*DynoHPINCR)
}

if(BHQ){
    TE = 0
}

BEF = sign(V)*(MPH>0.5)*abs(BE)
BEAutoF = sign(V)*(MPH>0.5)*abs(BEAuto)

if(Dynamics == 0){
    TELocal = TE*sign(CONTROL_STAND_DATA[16,number])
}
elseif(Dynamics == 1){
    TELocal = TE*sign(V)
}

BEForce = BEF + BEAutoF

if((TE!=0) | (BEForce!=0)){
    Force = TELocal - BEForce
}
else{
    Force = 0    
}

W:applyForce(-E:up()*(Force/5))

LOCOMOTIVE_PROCESSOR = array(CarCount,Load,MPH,TrainWeight,Braking_Loco,Braking_Train,V,E,O,W,DynamicTemp,MotorTemp,DynamicShort,MotorShort,GroundRelay,DynamicBrakeWarning,WheelSlip)


