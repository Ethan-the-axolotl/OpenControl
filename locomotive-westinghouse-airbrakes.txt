@name OpenControl/Locomotive-Westinghouse-Airbrakes
@inputs Locomotive:entity BPAngleCockFRONT BPAngleCockREAR MU2A [AirMU_FrontIN AirMU_RearIN LOCOMOTIVE_PROCESSOR CONTROL_STAND_DATA CONFIGURATION_DATA ENGINE_SOUND_DATA]:array
@outputs [AirMU_FrontOUT AirMU_RearOUT LOCOMOTIVE_AIRBRAKE_DATA]:array MainReservoir EqualizingReservoir BrakePipe BrakeCylinder AutomaticAFM IndependentAFM Compressor AirSpit AirMU BP_Open IsLastLocomotive BrakePipeLocal HoldatZero
@persist [E O W]:entity [SmoothTable]:table
@persist Compressor MainCharging MainCharged TopUpMainRes Interval Compressor_CFM MainReservoirVolume BrakePipingVolume LocomotiveBrakePipeLocalVolume CompressorTime PauseCOMP_EQing Equalized EqualizedHalfandHalf
@persist Discharging_EQ Discharging_BC EqualizedBC IndAFM IndAFMCapture IndAFMCapture2 AutoAFM AutoAFMCapture AutoAFMCapture2 IndependentAFM_Local AutomaticAFM_Local IndNotch BrakePipeLocalCutin TrainLine
@persist TotalBPVol BrakePipeLocalVol TrainlineEQ TLBP_Equal ERBP_Equal ERBP_EqualLOCKED BrakePipeLocal BrakePipe CompRefill BrakeLinePumpLoss MRCO EQCO TLCO TLDropToZero AirMU
@persist COMPEngineOn AirSpit IsLead BrakePipeAnglecock BP_Open NumRes NominalFlowPHYS AutoPressureSet TELocal LastCarCount HoldatZero FeedPressure MainResFeedPressure MainResRechargePressure
@persist BPAC_AirMU IsLastLocomotive BPAC_AirMU_Front BPAC_AirMU_Rear LocomotivePOS NextLocomotive HasPM HasTM SlugMode AutomaticPressureSet BrakeCylinderFeed BPFLOW
@trigger none
@model

if(dupefinished() | duped()){ reset() }
if(first()){ 
    
    E = entity()
    O = owner()
    W = E:isWeldedTo()

    CarCount = 0
    
    Compressor_CFM = CONFIGURATION_DATA[10,number] 
    MainReservoirVolume = CONFIGURATION_DATA[11,number] 
    BrakePipingVolume = pi()*((0.0416667/2)^2)*7
    Interval = 150
    
    LocomotiveBrakePipeLocalVolume = MainReservoirVolume + BrakePipingVolume
    CompressorTime = ((((LocomotiveBrakePipeLocalVolume * 140 - 0) / (14.7 * Compressor_CFM))*60)/Interval)
    NumRes = 4
    NominalFlowPHYS = 0.865
    BPFLOW = 1.3
    
    MainReservoir = 140
    EqualizingReservoir = 90
    BrakePipeLocal = 90
    BrakeCylinderFeed = 72
    BrakeCylinder = 72
    
    FeedPressure = CONFIGURATION_DATA[53,number]
    MainResFeedPressure = CONFIGURATION_DATA[54,number]
    MainResRechargePressure = CONFIGURATION_DATA[55,number]
    
    EqualizedHalfandHalf = 1
    Discharging_EQ = 0
    MainCharging = 0    
    MainCharged = 0
    TopUpMainRes = 0
    Equalized = 0
    IndependentAFM_Local = 0
    AutomaticAFM_Local = 0
    IndNotch = 0
    TrainLine = 0
    BrakePipeLocalVol = 2.7
    TotalBPVol = 0
    BrakePipeLocalCutin = 1
    TrainlineEQ = 1
    TLBP_Equal = 0
    Compressor = 0 
    BP_Open = 0
    LastCarCount = 0
    HoldatZero = 0
    BPAC_AirMU_Local = 0
    BPAC_AirMU = 0
    BPAC_AirMU_CameFromMU = 0
    AirSpit = 0
    
    UnitType = CONFIGURATION_DATA[58,number]
    
    HasPM = (UnitType==0) | (UnitType==2)
    HasTM = (UnitType==0) | (UnitType==1)
    SlugMode = UnitType==1
    if(!HasPM){
        HEP = 0
        DPM = 0
    }

    function number smooth(Var,SmoothAmount,ID:string,DefaultVal){
        if(!SmoothTable:exists(ID)){
            SmoothTable[ID,number] = DefaultVal
        }
        local Smooth = SmoothTable[ID,number]    
        Smooth += (Var-Smooth) / SmoothAmount
        SmoothTable[ID,number] = Smooth
        return Smooth
    }
    
    timer("AutoAFM_Compare",500)
    timer("IndAFM_Compare",500)
    timer("airspitloss",1000)   
}

if(CONTROL_STAND_DATA[19,number]){
    interval(150)
}

if(BPAngleCockFRONT){
    if(AirMU_FrontIN[1,string] == "opencontrol"){
        BrakePipeAnglecock = 1
        BPAC_AirMU = 0
    }
    else{
        BrakePipeAnglecock = 1
        BPAC_AirMU = 1
    }
}
elseif(BPAngleCockREAR){
    if(AirMU_RearIN[1,string] == "opencontrol"){
        BrakePipeAnglecock = 1
        BPAC_AirMU = 0
    }
    else{
        BrakePipeAnglecock = 1
        BPAC_AirMU = 1
    }
}
elseif(BPAngleCockREAR & BPAngleCockFRONT){
    if(AirMU_FrontIN[1,string] == "opencontrol" & AirMU_RearIN[1,string] == "opencontrol"){
        BrakePipeAnglecock = 1
        BPAC_AirMU = 0
    }
    else{
        BrakePipeAnglecock = 1
        BPAC_AirMU = 1
    }
}

if(BPAngleCockREAR == 0 & BPAngleCockFRONT == 0){
    BrakePipeAnglecock = 0
    BPAC_AirMU = 1
}


if(!IsLead){
    if((AirMU_FrontIN[7,number] > 0) | (AirMU_RearIN[7,number] > 0)){
        LocomotivePOS = (AirMU_FrontIN[7,number]-1)
        LocomotivePOS = (AirMU_RearIN[7,number]-1)
    }
}
else{
    LocomotivePOS = 74
}

IsLastLocomotive = (!IsLead & !(AirMU_FrontIN[1,string] == "opencontrol" & AirMU_RearIN[1,string] == "opencontrol")) ? 1 : 0

if(!IsLead){
    if(IsLastLocomotive){
        if(AirMU_FrontIN[7,number] > AirMU_RearIN[7,number]){
            NextLocomotive = AirMU_FrontIN[7,number]
            BPAC_AirMU_Front = BPAC_AirMU
        }
        else{
            NextLocomotive = AirMU_RearIN[7,number]
            BPAC_AirMU_Rear = BPAC_AirMU
        }
    }
    else{
        if(AirMU_FrontIN[7,number] > AirMU_RearIN[7,number]){
            NextLocomotive = AirMU_FrontIN[7,number]
            if(changed(AirMU_RearIN[6,number])){
                BPAC_AirMU_Front = AirMU_RearIN[6,number]
                BPAC_AirMU_Output = AirMU_RearIN[6,number]
                BPAC_AirMU = AirMU_RearIN[6,number]
            }
        }
        else{
            NextLocomotive = AirMU_RearIN[7,number]
            if(changed(AirMU_FrontIN[6,number])){
                BPAC_AirMU_Rear = AirMU_FrontIN[6,number]
                BPAC_AirMU_Output = AirMU_FrontIN[6,number]
                BPAC_AirMU = AirMU_FrontIN[6,number]
            }
        }
        
    }
}
else{
    if(AirMU_FrontIN[1,string] == "opencontrol"){
        BPAC_AirMU_Front = AirMU_FrontIN[6,number]
        BPAC_AirMU_Output = AirMU_FrontIN[6,number]
        BPAC_AirMU = AirMU_FrontIN[6,number]
    }
    elseif(AirMU_RearIN[1,string] == "opencontrol"){
        BPAC_AirMU_Rear = AirMU_RearIN[6,number]
        BPAC_AirMU_Output = AirMU_RearIN[6,number]
        BPAC_AirMU = AirMU_RearIN[6,number]
    }
}    


CarCount = LOCOMOTIVE_PROCESSOR[1,number]

if(HasPM){
    if(changed((ENGINE_SOUND_DATA[7,number] | ENGINE_SOUND_DATA[8,number]) == 1)&(ENGINE_SOUND_DATA[7,number] | ENGINE_SOUND_DATA[8,number]) == 1){
        timer("engst_comp",10000)    
    }
    
    if(CONTROL_STAND_DATA[28,number] == 1){
        if(clk("engst_comp")){
            COMPEngineOn = 1    
            stoptimer("engst_comp")
        }
    }
    else{
        stoptimer("engst_comp")
    }
    
    if((ENGINE_SOUND_DATA[7,number] | ENGINE_SOUND_DATA[8,number]) == 0){
        COMPEngineOn = 0    
    }
}
elseif(!HasPM){
    if(IsLead){
        COMPEngineOn = 1
    }
}


if(AirMU_FrontIN[1,string] == "opencontrol" | AirMU_RearIN[1,string] == "opencontrol"){
    if(CONTROL_STAND_DATA[28,number] == 0 & MU2A>0){ #MU2A - Trail
        if(AirMU_RearIN[5,number] == 1){
            IndependantMU = AirMU_RearIN[2,number]
            PressureSetMU = AirMU_RearIN[3,number]
            MainResMU = AirMU_RearIN[4,number]
    
            IsLead = 0
            AirMU = 1
            MainReservoir = MainResMU
            BrakeCylinder = IndependantMU
            AutoPressureSet = PressureSetMU
        }
        elseif(AirMU_FrontIN[5,number] == 1){
            IndependantMU = AirMU_FrontIN[2,number]
            PressureSetMU = AirMU_FrontIN[3,number]
            MainResMU = AirMU_FrontIN[4,number]
    
            IsLead = 0
            AirMU = 1
            MainReservoir = MainResMU
            BrakeCylinder = IndependantMU
            AutoPressureSet = PressureSetMU
        }
        else{
            IndependantMU = AirMU_RearIN[2,number]
            PressureSetMU = AirMU_RearIN[3,number]
            MainResMU = AirMU_RearIN[4,number]
    
            IsLead = 0
            AirMU = 1
            MainReservoir = MainResMU
            BrakeCylinder = IndependantMU
            AutoPressureSet = PressureSetMU           
        }
    }
    elseif(CONTROL_STAND_DATA[28,number] == 0 & MU2A == 0){ #MU2A - Dead
        if(AirMU_RearIN[5,number] == 1){
            IndependantMU = AirMU_RearIN[2,number]
            PressureSetMU = AirMU_RearIN[3,number]
            MainResMU = AirMU_RearIN[4,number]
    
            IsLead = 0
            AirMU = 1
            MainReservoir = MainResMU
            BrakeCylinder = IndependantMU
            AutoPressureSet = PressureSetMU
        }
        elseif(AirMU_FrontIN[5,number] == 1){
            IndependantMU = AirMU_FrontIN[2,number]
            PressureSetMU = AirMU_FrontIN[3,number]
            MainResMU = AirMU_FrontIN[4,number]
    
            IsLead = 0
            AirMU = 1
            MainReservoir = MainResMU
            BrakeCylinder = IndependantMU
            AutoPressureSet = PressureSetMU
        }
        else{
            IndependantMU = AirMU_RearIN[2,number]
            PressureSetMU = AirMU_RearIN[3,number]
            MainResMU = AirMU_RearIN[4,number]
    
            IsLead = 0
            AirMU = 1
            MainReservoir = MainResMU
            BrakeCylinder = IndependantMU
            AutoPressureSet = PressureSetMU           
        }        
    }
    elseif(CONTROL_STAND_DATA[28,number] == 1 & MU2A == 0){ #MU2A - Lead
        IsLead = 1
        IndependantMU = BrakeCylinder
        PressureSetMU = CONTROL_STAND_DATA[4,number]
        MainResMU = MainReservoir
        AirMU = 0
        AutoPressureSet = CONTROL_STAND_DATA[4,number]
    }
}
else{
    if(CONTROL_STAND_DATA[28,number]){
        IsLead = 1
        IndependantMU = BrakeCylinder
        PressureSetMU = CONTROL_STAND_DATA[4,number]
        MainResMU = MainReservoir
        AirMU = 0
        AutoPressureSet = CONTROL_STAND_DATA[4,number]
    }
}

AirMU_FrontOUT = array("opencontrol",IndependantMU,PressureSetMU,MainResMU,IsLead,BPAC_AirMU_Front,LocomotivePOS)
AirMU_RearOUT = array("opencontrol",IndependantMU,PressureSetMU,MainResMU,IsLead,BPAC_AirMU_Rear,LocomotivePOS)

if(COMPEngineOn){
    if(Compressor){        
        if(AirMU == 0){
            if(MainReservoir<MainResFeedPressure){
                MainReservoir += (((CompressorTime/NumRes)+(LOCOMOTIVE_PROCESSOR[21,number]/1200)))/2
            }
            elseif(MainReservoir > MainResFeedPressure){
                MainReservoir = MainResFeedPressure    
            }
        }
        
        if(!CONTROL_STAND_DATA[11,number]){
            if(floor(EqualizingReservoir)<FeedPressure){
                if(floor(MainReservoir) > floor(EqualizingReservoir)){
                    local SplitRate = (CompressorTime/NumRes)
                    EqualizingReservoir += SplitRate
                    MainReservoir -= SplitRate
                }
                elseif(floor(MainReservoir) < floor(EqualizingReservoir)){
                    local SplitRate = (CompressorTime/NumRes)
                    EqualizingReservoir -= SplitRate
                    MainReservoir += SplitRate
                }
                elseif(floor(MainReservoir) == floor(EqualizingReservoir)){
                    EqualizingReservoir = EqualizingReservoir
                }
            }
        }
    }
    
    AutomaticPressureSet = AutoPressureSet

    if(HoldatZero == 0){
        if(BrakePipeAnglecock == 1){
            if(CarCount<2 & BPAC_AirMU){
                TrainLine = 0
                BP_Open = 1
                
                if(BrakePipeLocal>0){
                    local FeedRate = 5
                    BrakePipeLocal -= FeedRate
                }
                elseif(BrakePipeLocal<0){
                    BrakePipeLocal = 0
                }
            }
            else{
                if(HoldatZero == 0){
                    BP_Open = 0
                }
                
                if(CONTROL_STAND_DATA[7,number]){
                        if(floor(TrainLine) < floor(BrakePipeLocal)){
                            local FeedRate = (CompressorTime/NominalFlowPHYS)*BPFLOW
                            TrainLine += FeedRate
                            BrakePipeLocal -= FeedRate
                        }
                        elseif(floor(TrainLine) > floor(BrakePipeLocal)){
                            local FeedRate = (CompressorTime/NominalFlowPHYS)*BPFLOW
                            TrainLine -= FeedRate
                            BrakePipeLocal += FeedRate
                        }
                        elseif(floor(TrainLine) == floor(BrakePipeLocal)){
                            TrainLine = BrakePipeLocal
                        }
                }
                else{
                    TrainLine = BrakePipeLocal
                }
            }
        }
        elseif(BrakePipeAnglecock == 0){
            TrainLine = BrakePipeLocal    
            BP_Open = 0
        }
    }
    else{
        if(BrakePipeAnglecock == 1){
            TrainLine = 0
            BP_Open = 1
            
            if(BrakePipeLocal>0){
                local FeedRate = 5
                BrakePipeLocal -= FeedRate
            }
            elseif(BrakePipeLocal<0){
                BrakePipeLocal = 0
            }    
        }
    }

    
    if(BrakePipeAnglecock == 0){   
        BP_Open = 0
    }
    
    if(CONTROL_STAND_DATA[7,number]>0){
        if(BP_Open == 0){
            if(CONTROL_STAND_DATA[11,number] == 0){
                if(floor(EqualizingReservoir) != floor(BrakePipeLocal)){
                    if(floor(EqualizingReservoir) < floor(BrakePipeLocal)){
                        local SplitRate = (CompressorTime/NominalFlowPHYS)
                        EqualizingReservoir += SplitRate
                        BrakePipeLocal -= SplitRate
                    }
                    elseif(floor(EqualizingReservoir) > floor(BrakePipeLocal)){
                        local SplitRate = (CompressorTime/NominalFlowPHYS)
                        EqualizingReservoir -= SplitRate
                        BrakePipeLocal += SplitRate
                    }
                    elseif(floor(EqualizingReservoir) == floor(BrakePipeLocal)){
                        EqualizingReservoir = EqualizingReservoir
                        BrakePipeLocal = BrakePipeLocal
                    }
                }
            }
            else{
                if(EqualizingReservoir>0){
                    EqualizingReservoir -= 5
                }
                elseif(EqualizingReservoir<=0){
                    EqualizingReservoir = 0    
                }
                
                if(BrakePipeLocal>0){
                    BrakePipeLocal -= 3
                }
                elseif(BrakePipeLocal<=0){
                    BrakePipeLocal = 0    
                }
                
                if(BrakeCylinder<BrakeCylinderFeed){
                    BrakeCylinder += 3
                }
            }
            
            if(floor(BrakePipeLocal) != AutomaticPressureSet){
                if(floor(BrakePipeLocal) < AutomaticPressureSet){
                    local FeedRate = (CompressorTime/NominalFlowPHYS)*BPFLOW
                    BrakePipeLocal += FeedRate
                    
                    if(!CONTROL_STAND_DATA[11,number]){
                        MainReservoir -= FeedRate/(NominalFlowPHYS*23)
                    }
                }
                elseif(floor(BrakePipeLocal) > AutomaticPressureSet){
                    local FeedRate = (CompressorTime/NominalFlowPHYS)*BPFLOW
                    BrakePipeLocal -= FeedRate
                    
                    if(BrakeCylinder<BrakeCylinderFeed){
                        BrakeCylinder += FeedRate/1.5
                    }
                    
                    if(Compressor){ 
                        if(AirMU == 0){
                            if(MainReservoir<MainResFeedPressure){
                                MainReservoir += (CompressorTime/NumRes)
                            }
                            elseif(MainReservoir > MainResFeedPressure){
                                MainReservoir = MainResFeedPressure    
                            }
                        }
                    }
                }
                elseif(floor(BrakePipeLocal) == AutomaticPressureSet){
                    BrakePipeLocal = AutomaticPressureSet
                    if(Compressor){ 
                        if(AirMU == 0){
                            if(MainReservoir<MainResFeedPressure){
                                MainReservoir += (CompressorTime/NumRes)
                            }
                            elseif(MainReservoir > MainResFeedPressure){
                                MainReservoir = MainResFeedPressure    
                            }
                        }
                    }
                }
            }
            
            if(round(BrakePipeLocal,0)<=0){
                BrakePipeLocal = 0
            }
            
            if(AutoPressureSet == FeedPressure){
                if(round(BrakePipeLocal,0) >= AutoPressureSet){
                    BrakePipeLocal = AutoPressureSet
                }
            }
        }
    }
}
else{
    if(BrakePipeAnglecock == 1){
        if(CarCount<2){
            TrainLine = 0
            BP_Open = 1
            
            if(BrakePipeLocal>0){
                local FeedRate = 5
                BrakePipeLocal -= FeedRate
            }
            elseif(BrakePipeLocal<0){
                BrakePipeLocal = 0
            }
        }    
    }
}

if(changed(CarCount)){
    if(CarCount>LastCarCount){
        HoldatZero = 1
    }
}

if(HoldatZero == 1){
    TrainLine = 0
    timer("holdTLzero",5000)    
}

if(clk("holdTLzero")){
    HoldatZero = 0
    TrainLine = TrainLine    
}

if(changed(CarCount)&CarCount){
    LastCarCount = CarCount
}

if(COMPEngineOn){
    if(round(MainReservoir)<MainResRechargePressure){
        Compressor = 1    
    }
    
    if(round(MainReservoir) >= MainResFeedPressure){
        Compressor = 0    
    }
}
else{
    Compressor = 0    
}

if(changed(clk("airspitloss"))&clk("airspitloss")){
    if(!Compressor){
        if(MainReservoir > 0){
            MainReservoir = (MainReservoir-0.02)
            AirSpit = 1
        }
    }
    
    if(CONTROL_STAND_DATA[7,number]==0 & BrakePipeLocal>1){
        BrakePipeLocal = (BrakePipeLocal-0.05)    
    }
    
    timer("airspitloss",(random(1,4)*1000))
}

if(changed(AirSpit)){
    if(AirSpit>0){
        timer("byebyeairspit",100)
    }
}

if(clk("byebyeairspit")){
    AirSpit = 0
    stoptimer("byebyeairspit")
}

if(AutoAFM == 0){
    AutoAFMCapture = BrakePipeLocal
    timer("AutoAFM_Compare",500)
    AutoAFM = 1
}

if(clk("AutoAFM_Compare")){
    AutoAFMCapture2 = BrakePipeLocal
    AutomaticAFM_Local = abs((AutoAFMCapture2 - AutoAFMCapture))
    AutoAFM = 0
}

if(IndAFM == 0){
    IndAFMCapture = CONTROL_STAND_DATA[8,number]
    timer("IndAFM_Compare",500)
    IndAFM = 1
}

if(clk("IndAFM_Compare")){
    IndAFMCapture2 = CONTROL_STAND_DATA[8,number]
    IndependentAFM_Local = abs((IndAFMCapture2 - IndAFMCapture))
    IndAFM = 0
}

TotalBPVol = BrakePipeLocalVol*max(CarCount,1)
BrakePipe = smooth((abs(BrakePipeLocal)),15,"brakepipe-smoothing",0)
IndependentAFM = smooth((IndependentAFM_Local*2),5,"IndAFMSmoothing",0)
AutomaticAFM = smooth((AutomaticAFM_Local*15),10,"AutoAFMSmoothing",0)

if(HasPM){
    if(changed(Compressor)&Compressor){
        Locomotive:soundPlay("aircompressor",0,CONFIGURATION_DATA[12,string])
    }
    if(changed(Compressor)&!Compressor){
        Locomotive:soundPlay("aircompressor",0,CONFIGURATION_DATA[13,string])
        soundPitch("aircompressor",100+(LOCOMOTIVE_PROCESSOR[21,number]/8))
    }
}

if(HasPM){
    if(Compressor){
        soundPitch("aircompressor",100+(LOCOMOTIVE_PROCESSOR[21,number]/10))
    }
}

if(changed(COMPEngineOn)){
    if(COMPEngineOn == 0){
        Locomotive:soundPlay("aircompressor",0,CONFIGURATION_DATA[13,string])    
        soundStop("aircompressor",1)
        Compressor = 0 
    }
}

if(AirMU == 0){
    if(CONFIGURATION_DATA[23,number] == 0){
        if(CONTROL_STAND_DATA[8,number] & BrakeCylinder<BrakeCylinderFeed){
            BrakeCylinder += 2   
            local FeedRate = (CompressorTime/NominalFlowPHYS)
            MainReservoir -= FeedRate/(NominalFlowPHYS*10)
        }
        elseif(CONTROL_STAND_DATA[9,number] & BrakeCylinder>0){
            BrakeCylinder -= 2    
        }
        elseif(CONTROL_STAND_DATA[10,number] & BrakeCylinder>0){
            BrakeCylinder -= 10   
        }
    }
    elseif(CONFIGURATION_DATA[23,number] == 1){
        if(changed(CONTROL_STAND_DATA[8,number] & IndNotch<2)&CONTROL_STAND_DATA[8,number] & IndNotch<2){
            IndNotch += 1
        }
        elseif(changed(CONTROL_STAND_DATA[9,number] & IndNotch>0)&CONTROL_STAND_DATA[9,number] & IndNotch>0){
            IndNotch -= 1
        }
    
        if(BrakeCylinder<BrakeCylinderFeed & IndNotch == 2){
            BrakeCylinder += 2   
        }
        elseif(BrakeCylinder<BrakeCylinderFeed & IndNotch == 1){
            BrakeCylinder = BrakeCylinder  
        }
        elseif(BrakeCylinder>0 & IndNotch == 0){
            BrakeCylinder -= 2   
        }
        elseif(CONTROL_STAND_DATA[10,number] & BrakeCylinder>0){
            BrakeCylinder -= 10   
        }
    }
    
    if(BrakeCylinder<0){
        BrakeCylinder = 0
    }
}

LOCOMOTIVE_AIRBRAKE_DATA = array(MainReservoir,EqualizingReservoir,BrakePipe,BrakeCylinder,AutomaticAFM,IndependentAFM,IndNotch,BrakePipeAnglecock,BrakePipeLocal,Compressor,BrakePipeAnglecock)

if(last()){
    soundPurge()
}
