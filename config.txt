@name OpenControl/config
@inputs 
@outputs [CONFIGURATION_DATA]:array [CONFIGURATION_CONTROL_DATA CONFIGURATION_ROUTING_DATA]:table
@persist ReverserF ReverserB IncreaseThrottle DecreaseThrottle IncreaseDynamics DecreaseDynamics IncreaseTrainBrake DecreaseTrainBrake IncreaseLocoBrake DecreaseLocoBrake SelectorUp SelectorDown
@persist HandBrake Sander Routing:table
@trigger none
@model
Controls = table()
if(dupefinished() | duped()){ reset() }
if(first()){ 

    # --// Control Stand //--
    
    #Reverser
    ReverserFS = ""
    ReverserNS = ""
    ReverserRS = ""
    
    #Throttle (Notch)
    ThrottleAdvance = ""
    ThrottleRetreat = ""
    
    #Dynamic (DynoNotch)
    DynamicThrottleAdvance = ""
    DynamicThrottleRetreat = ""
    
    # --// Air Brakes //--
    
    #Air Compressor
    Compressor_CFM = 254 
    MainReservoirVolume = 33.8
    CompressorStart = ""
    CompressorShutdown = ""

    #Automatic Brake Type
    AutomaticBrakeType = 0
    #0 = Westinghouse 26L
    #1 = Westinghouse 26C
    #2 = Westinghouse No. 6
    
    #Automatic Air Brake
    AutomaticApply = "opencontrol/airbrakes/26c/apply.wav"
    AutomaticRelease = "opencontrol/airbrakes/26c/release.wav"
    AutomaticEmergency = "opencontrol/airbrakes/26c/emergency_apply.wav"
    AutomaticEmergencyRelease = "opencontrol/airbrakes/26c/emergency_release.wav"
    
    #Independent Brake Type
    IndependentBrakeType = 0
    #0 = Westinghouse SA26
    #1 = Westinghouse S40F

    #Independent Air Brake
    IndependentApply = "opencontrol/airbrakes/sa26/apply.wav"
    IndependentRelease = "opencontrol/airbrakes/sa26/release.wav"
    IndependentBailOn = "opencontrol/airbrakes/sa26/bail_off2.wav"
    IndependentBailOff = "opencontrol/airbrakes/sa26/bail_on2.wav"

    # --// Controls //--

    Shift = "lshift" #When pressing this key, all controls with "+Shift" next to them will be triggered, and all the other will be ignored.
    
    Controls["ReverserF",string] = "W"
    Controls["ReverserB",string] = "S"
    
    Controls["IncreaseThrottle",string] = "D"
    Controls["DecreaseThrottle",string] = "A"
    
    Controls["IncreaseDynamics",string] = "right"
    Controls["DecreaseDynamics",string] = "left"
    
    Controls["SelectorUp",string] = "rbracket +Shift"
    Controls["SelectorDown",string] = "lbracket +Shift"
    
    Controls["IncreaseTrainBrake",string] = "W +Shift"
    Controls["DecreaseTrainBrake",string] = "S +Shift"
    
    Controls["IncreaseLocoBrake",string] = "rbracket"
    Controls["DecreaseLocoBrake",string] = "lbracket"
    Controls["BailLocoBrake",string] = "slash"
    
    Controls["HandBrake",string] = "H"
    Controls["Sander",string] = "period"
    
    Controls["UseButton",string] = "mouse_left"
    
    LeverBased = 0 #0 for Control-Based, 1 for Lever-Based
    #When available, this enables the Lever-Based Control mode. This means that the key controls the LEVER, not the CONTROL.
    #For example consider a locomotive with a Selector Lever. Normally you'd press [IncreaseDynamics] to turn on the dynamic braking
    #With LeverBased mode, in order to turn on the dynamics you have to be in the "Off" selector notch and press [DecreaseTransition] to turn on the dynamics.


foreach(K,V:string = Controls){
    if(V:find(" +Shift")){
        Routing[K,number] = 1
        local EXP = V:explode(" ")
        Controls[K,string] = EXP[1,string]
    }
    else{
        Routing[K,number] = 0
    }
}
}
CONFIGURATION_DATA = array(Shift,LeverBased,ReverserFS,ReverserNS,ReverserRS,ThrottleAdvance,ThrottleRetreat,DynamicThrottleAdvance,DynamicThrottleRetreat,Compressor_CFM,MainReservoirVolume,CompressorStart,CompressorShutdown,AutomaticApply,AutomaticRelease,AutomaticEmergency,AutomaticEmergencyRelease,IndependentApply,IndependentRelease,IndependentBailOn,IndependentBailOff,AutomaticBrakeType,IndependentBrakeType)
CONFIGURATION_CONTROL_DATA = Controls
CONFIGURATION_ROUTING_DATA = Routing
