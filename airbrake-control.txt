@name OpenControl/airbrake-control
@inputs CarCount BrakePipeLocalAnglecock [CONTROL_STAND_DATA CONFIGURATION_DATA]:array
@outputs [LOCOMOTIVE_DATA]:array MainReservoir EqualizingReservoir BrakePipe BrakeCylinder AutomaticAFM IndependentAFM
@persist Compressor MainCharging MainCharged TopUpMainRes Interval Compressor_CFM MainReservoirVolume BrakePipingVolume LocomotiveBrakePipeLocalVolume CompressorTime PauseCOMP_EQing Equalized EqualizedHalfandHalf
@persist Discharging_EQ Discharging_BC EqualizedBC IndAFM IndAFMCapture IndAFMCapture2 AutoAFM AutoAFMCapture AutoAFMCapture2 IndependentAFM_Local AutomaticAFM_Local IndNotch BrakePipeLocalCutin TrainLine
@persist SmoothTable:table TotalBPVol BrakePipeLocalVol TrainlineEQ TLBP_Equal ERBP_Equal ERBP_EqualLOCKED BrakePipeLocal BrakePipe
@trigger none
@model

LOCOMOTIVE_DATA = array(MainReservoir,EqualizingReservoir,BrakePipe,BrakeCylinder,AutomaticAFM,IndependentAFM,IndNotch,BrakePipeLocalAnglecock,BrakePipeLocal)

if(dupefinished() | duped()){ reset() }
if(first()){ 
    
Compressor_CFM = 254 
MainReservoirVolume = 33.8
BrakePipingVolume = pi()*(0.0416667/2)*(0.0416667/2)
Interval = 150

LocomotiveBrakePipeLocalVolume = MainReservoirVolume + BrakePipingVolume
CompressorTime = ((((LocomotiveBrakePipeLocalVolume * 140 - 0) / (14.7 * Compressor_CFM))*60)/Interval)
  
MainReservoir = 140
EqualizingReservoir = 90  
BrakePipeLocal = 90
BrakeCylinder = 65

EqualizedHalfandHalf = 1
Discharging_EQ = 0
MainCharging = 0    
MainCharged = 0
TopUpMainRes = 0
Equalized = 0
IndependentAFM_Local = 0
AutomaticAFM_Local = 0
IndNotch = 0
TrainLine = 0
BrakePipeLocalVol = 2.7
TotalBPVol = BrakePipeLocalVol*max(CarCount,1)
BrakePipeLocalCutin = 1
TrainlineEQ = 1

timer("AutoAFM_Compare",500)
timer("IndAFM_Compare",500)

function number smooth(Var,SmoothAmount,ID:string,DefaultVal){
    if(!SmoothTable:exists(ID)){
        SmoothTable[ID,number] = DefaultVal
    }
    local Smooth = SmoothTable[ID,number]    
    Smooth += (Var-Smooth) / SmoothAmount
    SmoothTable[ID,number] = Smooth
    return Smooth
}
}

interval(150)

if(Compressor){   
    #local RoundedMR = round(MainReservoir)
    #MainReservoir = RoundedMR
    if(!PauseCOMP_EQing){
        if(round(MainReservoir)<140){
        MainReservoir += (CompressorTime*EqualizedHalfandHalf)
        }
        
        if(CONTROL_STAND_DATA[7,number]>0){
            if(!Discharging_EQ){
                if(EqualizingReservoir<90){
                    EqualizedHalfandHalf = 0.25
                    EqualizingReservoir += (CompressorTime*EqualizedHalfandHalf)
                }
                
                if(EqualizingReservoir>89 & EqualizingReservoir<90){
                    EqualizedHalfandHalf = 1
                }
            }
        }
    }
}

if(CONFIGURATION_DATA[23,number] == 0){
    if(CONTROL_STAND_DATA[8,number] & BrakeCylinder<65){
        BrakeCylinder += 2   
    }
    elseif(CONTROL_STAND_DATA[9,number] & BrakeCylinder>0){
        BrakeCylinder -= 2    
    }
    elseif(CONTROL_STAND_DATA[10,number] & BrakeCylinder>0){
        BrakeCylinder -= 10   
    }
}
elseif(CONFIGURATION_DATA[23,number] == 1){
    if(changed(CONTROL_STAND_DATA[8,number] & IndNotch<2)&CONTROL_STAND_DATA[8,number] & IndNotch<2){
        IndNotch += 1
    }
    elseif(changed(CONTROL_STAND_DATA[9,number] & IndNotch>0)&CONTROL_STAND_DATA[9,number] & IndNotch>0){
        IndNotch -= 1
    }

    if(BrakeCylinder<65 & IndNotch == 2){
        BrakeCylinder += 2   
    }
    elseif(BrakeCylinder<65 & IndNotch == 1){
        BrakeCylinder = BrakeCylinder  
    }
    elseif(BrakeCylinder>0 & IndNotch == 0){
        BrakeCylinder -= 2   
    }
    elseif(CONTROL_STAND_DATA[10,number] & BrakeCylinder>0){
        BrakeCylinder -= 10   
    }
}

if(Discharging_EQ){
    if(changed(EqualizingReservoir)){
        if(BrakeCylinder<65){
            BrakeCylinder += 0.25
        }
    }
}

if(changed(BrakeCylinder<0)&BrakeCylinder<0){
    BrakeCylinder = 0    
}

#[
if(CONTROL_STAND_DATA[7,number]>0){
    if(!Discharging_EQ){
        if(MainReservoir>60){
            if(EqualizingReservoir<90){
                if(round(EqualizingReservoir)!=round(MainReservoir) & !Equalized){
                    Equalized = 0
                    PauseCOMP_EQing = 1
                    MainReservoir -= 0.15
                    EqualizingReservoir += 1
                }
                
                if(round(EqualizingReservoir)==round(MainReservoir)){
                    Equalized = 1
                    PauseCOMP_EQing = 0
                }
            }
        }
    }
}
]#

if(CONTROL_STAND_DATA[7,number]>0){
    if(!Discharging_EQ){
        if(MainReservoir>90){
            if(EqualizingReservoir<90){
                if(round(EqualizingReservoir)!=round(MainReservoir)){
                    PauseCOMP_EQing = 1
                    MainReservoir -= 0.1
                    EqualizingReservoir += 0.5
                }
                
                if(round(EqualizingReservoir)==round(MainReservoir)){
                    PauseCOMP_EQing = 0
                }
            }
        }
    }
}

if(MainReservoir<140 & MainCharged == 0){
    Compressor = 1
    MainCharging = 1
}

if(changed(MainCharging & MainReservoir > 139 & MainReservoir < 140)&MainCharging & MainReservoir > 139 & MainReservoir < 140){
    MainCharged = 1   
}
elseif(MainCharging & MainReservoir > 140){
    MainReservoir = 140    
    MainCharged = 1  
}
    
if(changed(MainCharged) & MainCharged){
    Compressor = 0    
    TopUpMainRes = 1
}
   
if(MainCharged & TopUpMainRes & MainReservoir < 130 & round(EqualizingReservoir)<90){
    Compressor = 1
}
elseif(MainCharged & TopUpMainRes & MainReservoir == 130 & round(EqualizingReservoir)<90){
    Compressor = 1
}
elseif(round(EqualizingReservoir<90) & CONTROL_STAND_DATA[3,number]<1 & (round(BrakePipeLocal) == round(TrainLine))){
    Compressor = 1
}
elseif(MainCharged & TopUpMainRes & MainReservoir > 139 & MainReservoir < 140 & round(inrange(EqualizingReservoir,89.5,90))){
    Compressor = 0   
}

if(changed(MainCharged & TopUpMainRes)&MainCharged & TopUpMainRes){
    
    timer("airspitloss",1000)
    
}

if(changed(clk("airspitloss"))&clk("airspitloss")){
    if(!Compressor){
        MainReservoir = (MainReservoir-0.08)
    }
    if(CONTROL_STAND_DATA[7,number]==0 & BrakePipeLocal>1){
        BrakePipeLocal = (BrakePipeLocal-0.05)    
    }
    
    timer("airspitloss",(random(1,4)*1000))
}


if(changed(round(EqualizingReservoir,0)==round(MainReservoir,0))&round(EqualizingReservoir,0)==round(MainReservoir,0)){
    Equalized = 1
}
elseif(changed(round(EqualizingReservoir,0)!=round(MainReservoir,0))&round(EqualizingReservoir,0)!=round(MainReservoir,0)){
    Equalized = 0
}

if(CONTROL_STAND_DATA[7,number]>0){
    if(CONTROL_STAND_DATA[3,number]>0){
        if(EqualizingReservoir>CONTROL_STAND_DATA[4,number]){
            Discharging_EQ = 1
            
            if(round(EqualizingReservoir)!=CONTROL_STAND_DATA[4,number]){
                if(EqualizingReservoir>CONTROL_STAND_DATA[4,number]){
                    EqualizingReservoir -= (CONTROL_STAND_DATA[5,number] ? 4 : 0.45)
                }
            }
        
            if(round(EqualizingReservoir) == CONTROL_STAND_DATA[4,number] & CONTROL_STAND_DATA[3,number]>0){
                EqualizingReservoir = EqualizingReservoir
            }
        }
        if(EqualizingReservoir<CONTROL_STAND_DATA[4,number]){
            Discharging_EQ = 1
            
            if(round(EqualizingReservoir)!=CONTROL_STAND_DATA[4,number]){
                if(EqualizingReservoir<CONTROL_STAND_DATA[4,number]){
                    EqualizingReservoir += (CONTROL_STAND_DATA[5,number] ? 4 : 0.45)
                    MainReservoir -= (0.1)
                }
            }
        
            if(round(EqualizingReservoir) == CONTROL_STAND_DATA[4,number] & CONTROL_STAND_DATA[3,number]>0){
                EqualizingReservoir = EqualizingReservoir
            }
        }
    }
    elseif(CONTROL_STAND_DATA[3,number]<1){
        Discharging_EQ = 0   
    }
}

if(MainReservoir<130){
    PauseCOMP_EQing = 0    
}

if(AutoAFM == 0){
    AutoAFMCapture = BrakePipeLocal
    timer("AutoAFM_Compare",500)
    AutoAFM = 1
}

if(clk("AutoAFM_Compare")){
    AutoAFMCapture2 = BrakePipeLocal
    AutomaticAFM_Local = abs((AutoAFMCapture2 - AutoAFMCapture))
    AutoAFM = 0
}

if(IndAFM == 0){
    IndAFMCapture = CONTROL_STAND_DATA[8,number]
    timer("IndAFM_Compare",500)
    IndAFM = 1
}

if(clk("IndAFM_Compare")){
    IndAFMCapture2 = CONTROL_STAND_DATA[8,number]
    IndependentAFM_Local = abs((IndAFMCapture2 - IndAFMCapture))
    IndAFM = 0
}

if(BrakePipeLocalAnglecock){
    if((round(EqualizingReservoir) != round(BrakePipeLocal)) | (round(BrakePipeLocal) != round(TrainLine))){
        if(!TLBP_Equal){
            if(BrakePipeLocalAnglecock){
                if(CarCount>0){
                    if(round(BrakePipeLocal)>20){
                        BrakePipeLocalCutin = 0
                        TrainlineEQ = 0
                    }
                    elseif(round(BrakePipeLocal)<20){
                        BrakePipeLocalCutin = 1    
                    }
                }
                elseif(CarCount<1){
                    BrakePipeLocalCutin = 1    
                    TrainLine = 0
                    TrainlineEQ = 1
                }
                
                if(!BrakePipeLocalCutin){
                    if(round(BrakePipeLocal)>round(TrainLine)){
                        TrainlineEQ = 0
                        TotalBPVol = BrakePipeLocalVol*max(CarCount,1)
                        #BrakePipeLocal = round(BrakePipeLocal)
                        BrakePipeLocal -= 1
                        TrainLine += 1
                        PauseCOMP_EQing = 1
                    }
                    elseif(round(BrakePipeLocal)<round(TrainLine)){
                        TrainlineEQ = 0
                        TotalBPVol = BrakePipeLocalVol*max(CarCount,1)
                        #BrakePipeLocal = round(BrakePipeLocal)
                        BrakePipeLocal += 1
                        TrainLine -= 1
                        PauseCOMP_EQing = 1
                    }
                    elseif(round(BrakePipeLocal) == round(TrainLine)){
                        BrakePipeLocalCutin = 1
                        TrainlineEQ = 1
                        TrainLine = BrakePipeLocal
                        PauseCOMP_EQing = 0
                    }
                }
            }
            elseif(!BrakePipeLocalAnglecock){
                BrakePipeLocalCutin = 1    
                TrainLine = 0
                TrainlineEQ = 1
                PauseCOMP_EQing = 0
            }
        }
        
        if(!ERBP_Equal){
            if(round(BrakePipeLocal) == round(TrainLine)){
                TrainLine = BrakePipeLocal
                PauseCOMP_EQing = 0
                TLBP_Equal = 1
            }
        }
    }
    
    #if(!ERBP_EqualLOCKED){
        if(!Discharging_EQ){
            if(round(BrakePipeLocal)<90){
                if(round(EqualizingReservoir)>20){
                    if(round(EqualizingReservoir)!=round(BrakePipeLocal)){
                        PauseCOMP_EQing = 1
                        EqualizingReservoir -= 1
                    }
                    
                    if(round(EqualizingReservoir)==round(BrakePipeLocal)){
                        PauseCOMP_EQing = 0
                        ERBP_Equal = 1
                    }
                }
            }
        }
    #}
    
    if(round((inrange(EqualizingReservoir,(EqualizingReservoir-1),(EqualizingReservoir+1))),0) == round((inrange(BrakePipeLocal,(BrakePipeLocal-1),(BrakePipeLocal+1))),0)){    
        if(Compressor){
            if(!Discharging_EQ){
                if(EqualizingReservoir<90){
                    EqualizedHalfandHalf = 1
                    EqualizingReservoir += (CompressorTime*EqualizedHalfandHalf)
                }
                
                if(EqualizingReservoir>89 & EqualizingReservoir<90){
                    EqualizedHalfandHalf = 1
                }
            }
        }
        
        if(CONTROL_STAND_DATA[7,number]>0){
            #if(changed(EqualizingReservoir)&EqualizingReservoir){
                BrakePipeLocal = EqualizingReservoir
                #ERBP_EqualLOCKED = 1
            #}
        }
    }
}
elseif(!BrakePipeLocalAnglecock){
    if(CONTROL_STAND_DATA[7,number]>0){
        #if(changed(EqualizingReservoir)&EqualizingReservoir){
            BrakePipeLocal = EqualizingReservoir
            #ERBP_EqualLOCKED = 1
        #}
    }    
}

BrakePipe = smooth((BrakePipeLocal),(15)+(CarCount*1),"brakepipe-smoothing",0)
IndependentAFM = smooth((IndependentAFM_Local*2),5,"IndAFMSmoothing",0)
AutomaticAFM = smooth((AutomaticAFM_Local*15),10,"AutoAFMSmoothing",0)

#[

if(changed(Compressor)&Compressor){
soundPlay("comp",0,"gsgtrainsounds/misc/compressors/gd_wbo_sd50_loop.wav")
}
elseif(changed(Compressor)&!Compressor){
soundPlay("comp",0,"gsgtrainsounds/misc/compressors/gd_wbo_sd50_end.wav")
}







