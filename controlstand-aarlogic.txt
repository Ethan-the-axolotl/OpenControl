@name OpenControl/controlstand-aarlogic
@inputs ControlStand:entity Pod:entity BrakeCutout UsingRearSeat [LOCOMOTIVE_DATA CONFIGURATION_DATA]:array [CONFIGURATION_CONTROL_DATA]:table
@outputs [CONTROL_STAND_DATA]:array
@persist Driver:entity Routing:table Controls:table Shift:string
@persist InServiceZone LocalEmergency BrakeNotch ServiceZone AutomaticPressureSet Suppression Emergency Independent_Bail
@persist ReverserF ReverserB IncreaseThrottle DecreaseThrottle IncreaseDynamics DecreaseDynamics IncreaseTrainBrake DecreaseTrainBrake IncreaseLocoBrake DecreaseLocoBrake SelectorUp SelectorDown
@persist HandBrake Sander
@trigger none 
@model

CONTROL_STAND_DATA = array(IncreaseTrainBrake,DecreaseTrainBrake,BrakeNotch,AutomaticPressureSet,Suppression,Emergency,BrakeCutout,IncreaseLocoBrake,DecreaseLocoBrake,Independent_Bail)

if(dupefinished() | duped()){ reset() }
if(first()){ 
    
Controls = CONFIGURATION_CONTROL_DATA
#CONFIGURATION_DATA = array(Controls,Shift,LeverBased,ReverserF,ReverserN,ReverserR,ThrottleAdvance,ThrottleRetreat
#,DynamicThrottleAdvance,DynamicThrottleRetreat,Compressor_CFM,MainReservoirVolume,CompressorStart,CompressorShutdown,
#AutomaticApply,AutomaticRelease,AutomaticEmergency,AutomaticEmergencyRelease,IndependentApply,IndependentRelease,IndependentBailOn,IndependentBailOff)
foreach(K,V:string = Controls){
    if(V:find(" +Shift")){
        Routing[K,number] = 1
        local EXP = V:explode(" ")
        Controls[K,string] = EXP[1,string]
    }
    else{
        Routing[K,number] = 0
    }
}
}

runOnKeys(Driver,1) 
interval(150)
Driver = Pod:driver()

if(keyClk(Driver)){
    local Shifting = Driver:keyPressed(CONFIGURATION_DATA[2,string])
    UseButton = Driver:keyPressed(Controls["UseButton",string]) & (Routing["UseButton",number] ? Shifting : !Shifting)
    
    if(!UseButton){
        local RF = UsingRearSeat ? "ReverserB" : "ReverserF"
        local RB = UsingRearSeat ? "ReverserF" : "ReverserB"
        
        ReverserF = Driver:keyPressed(Controls[RF,string]) & (Routing[RF,number] ? Shifting : !Shifting)
        ReverserB = Driver:keyPressed(Controls[RB,string]) & (Routing[RB,number] ? Shifting : !Shifting)
        
        IncreaseThrottle = Driver:keyPressed(Controls["IncreaseThrottle",string]) & (Routing["IncreaseThrottle",number] ? Shifting : !Shifting)
        DecreaseThrottle = Driver:keyPressed(Controls["DecreaseThrottle",string]) & (Routing["DecreaseThrottle",number] ? Shifting : !Shifting)
        
        IncreaseTrainBrake = Driver:keyPressed(Controls["IncreaseTrainBrake",string]) & (Routing["IncreaseTrainBrake",number] ? Shifting : !Shifting)
        IncreaseLocoBrake = Driver:keyPressed(Controls["DecreaseTrainBrake",string]) & (Routing["DecreaseTrainBrake",number] ? Shifting : !Shifting)
        
        IncreaseLocoBrake = Driver:keyPressed(Controls["IncreaseLocoBrake",string]) & (Routing["IncreaseLocoBrake",number] ? Shifting : !Shifting)
        DecreaseLocoBrake = Driver:keyPressed(Controls["DecreaseLocoBrake",string]) & (Routing["DecreaseLocoBrake",number] ? Shifting : !Shifting)
        Independent_Bail = Driver:keyPressed(Controls["BailLocoBrake",string]) & (Routing["BailLocoBrake",number] ? Shifting : !Shifting)
        
        IncreaseDynamics = Driver:keyPressed(Controls["IncreaseDynamics",string]) & (Routing["IncreaseDynamics",number] ? Shifting : !Shifting)
        DecreaseDynamics = Driver:keyPressed(Controls["DecreaseDynamics",string]) & (Routing["DecreaseDynamics",number] ? Shifting : !Shifting)
        
        HandBrake = Driver:keyPressed(Controls["HandBrake",string]) & (Routing["HandBrake",number] ? Shifting : !Shifting)
        Sander = Driver:keyPressed(Controls["Sander",string]) & (Routing["Sander",number] ? Shifting : !Shifting)
        
        SelectorUp = Driver:keyPressed(Controls["SelectorUp",string]) & (Routing["SelectorUp",number] ? Shifting : !Shifting)
        SelectorDown = Driver:keyPressed(Controls["SelectorDown",string]) & (Routing["SelectorDown",number] ? Shifting : !Shifting)
    }
}

if(!InServiceZone){
    if(changed(IncreaseTrainBrake & BrakeNotch<5)&IncreaseTrainBrake & BrakeNotch<5){
        BrakeNotch += 1    
    }
    
    if(changed(DecreaseTrainBrake & BrakeNotch>0)&DecreaseTrainBrake & BrakeNotch>0){
        BrakeNotch -= 1   
    }
}

if(BrakeNotch == 2){
    InServiceZone = 1
    if(IncreaseTrainBrake & ServiceZone<20){
        ServiceZone += 1
    }
    if(DecreaseTrainBrake & ServiceZone>0){
        ServiceZone -= 1
    }
}

if(ServiceZone==20){
    InServiceZone = 0
}
elseif(ServiceZone==0){
    InServiceZone = 0
}

switch(BrakeNotch){
    case 0,
        ControlStand:setBodygroup(4,0)
        AutomaticPressureSet = 90
        Suppression = 0
    break
    case 1,
        ControlStand:setBodygroup(4,1)
        AutomaticPressureSet = 80
        Suppression = 0
    break
    case 2,
        ControlStand:setBodygroup(4,2+round((ServiceZone*(50/20))/10))
        AutomaticPressureSet = 80-ServiceZone
        Suppression = 0
    break
    case 3,
        ControlStand:setBodygroup(4,8)
        if(!LocalEmergency){
            Suppression = 1
        }
    break
    case 4,
        ControlStand:setBodygroup(4,10)
        Suppression = 0
        AutomaticPressureSet = 0
    break
    case 5,
        ControlStand:setBodygroup(4,11)
        AutomaticPressureSet = 0
        LocalEmergency = 1
        Suppression = 1
        Emergency = 1
    break
}

if(!Independent_Bail){
ControlStand:setBodygroup(5,1+LOCOMOTIVE_DATA[4,number]/10)
}
elseif(Independent_Bail){
ControlStand:setBodygroup(5,0)
}

if(changed(Independent_Bail)&Independent_Bail){
    soundPlay("indbailoff",0,"opencontrol/airbrakes/sa26/bail_off2.wav")
}
elseif(changed(Independent_Bail)&!Independent_Bail){
    soundPlay("indbailon",0,"opencontrol/airbrakes/sa26/bail_on2.wav")    
}


if(changed(LocalEmergency & BrakeNotch<2)&LocalEmergency & BrakeNotch<2){
    timer("emrgtimeout",60000)    
}

if(clk("emrgtimeout")){
    LocalEmergency = 0
    stoptimer("emrgtimeout")
}

if(LocalEmergency == 0 & BrakeNotch<2){
    Emergency = 0
}
