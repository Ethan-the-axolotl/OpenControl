@name OpenControl/controlstand-aarlogic
@inputs ControlStand:entity Pod:entity BatteryKnife EngineRun GenField FuelPump Control BrakeCutout GroundRelayReset UsingRearSeat InsertReverser Horn Sand HEP_Up HEP_Down
@inputs [MU_Front_In MU_Rear_In LOCOMOTIVE_AIRBRAKE_DATA CONFIGURATION_DATA ENGINE_SOUND_DATA LOCOMOTIVE_PROCESSOR]:array [CONFIGURATION_CONTROL_DATA CONFIGURATION_ROUTING_DATA]:table
@outputs [CONTROL_STAND_DATA MU_Front_Out MU_Rear_Out]:array ReverserRemoved Routing:table IsLead ConsistMotors DBWarning InServiceZone BrakeNotch AutomaticPressureSet Suppression Emergency
@outputs Independent_Bail ReverserF ReverserB IncreaseThrottle DecreaseThrottle IncreaseDynamics DecreaseDynamics IncreaseTrainBrake DecreaseTrainBrake IncreaseLocoBrake DecreaseLocoBrake
@outputs SelectorUp SelectorDown HandleOff EmergencyBrake DynamicNotch DynamicsSetup DynamicsPowerZone MUCompressor SelectorNotch LocomotivePOS HasPM HasTM SlugMode Reverser Notch
@persist [Driver DriverOld]:entity DriverQ Routing:table Controls:table Shift:string ThrottleA ThrottleB ThrottleC ThrottleD 
@persist InServiceZone LocalEmergency BrakeNotch ServiceZone AutomaticPressureSet Suppression Emergency Independent_Bail
@persist ReverserF ReverserB IncreaseThrottle DecreaseThrottle IncreaseDynamics DecreaseDynamics IncreaseTrainBrake DecreaseTrainBrake IncreaseLocoBrake DecreaseLocoBrake SelectorUp SelectorDown
@persist HandBrake Sander ServiceHiss ServiceRelease IndHiss IndRelease EmergRelease LocoBrakePOS NumberOfNotches EmergencyBrake HandleOff
@persist Notch UnNotchThrottleF UnNotchThrottleB Reverser ReverserLocal HornPullcord DynamicNotch DynamicsSetup DynamicsPowerZone DynamicUnlock 
@persist DynamicNotchLocal DynamicsSetupLocal DynamicsPowerZoneLocal DynamicUnlockLocal NotchLocal Isolation EngineRunLocal GenFieldLocal GroundRelayResetLocal DBWarning MUReverserFW MUReverserBW
@persist MUCompressor IsLead SelectorNotch SelectorMove LocomotivePOS HasPM HasTM SlugMode ConsistMotors ManualEmerg EmergencyBrakeHiss IndFeed
@trigger BatteryKnife
@model

if(dupefinished() | duped()){ reset() }
if(first()){ 
    Controls = CONFIGURATION_CONTROL_DATA 
    Routing = CONFIGURATION_ROUTING_DATA
    
    IndFeed = 72
    
    ServiceHiss = 1
    ServiceRelease = 1
    IndHiss = 1
    IndRelease = 1
    EmergRelease = 0
    LocoBrakePOS = LOCOMOTIVE_AIRBRAKE_DATA[4,number]
    EmergencyBrakeHiss = 0
    
    
    NotchLocal = 0
    UnNotchThrottleF = 0
    UnNotchThrottleB = 0
    
    DynamicNotchLocal = 0
    DynamicsSetupLocal = 0
    DynamicsPowerZoneLocal = 0
    DynamicUnlockLocal = 0
    
    NumberOfNotches = CONFIGURATION_DATA[43,number]
    ConsistMotors = 0
    
    HornPullcord = 1
    
    UnitType = CONFIGURATION_DATA[58,number]
    
    HasPM = (UnitType==0) | (UnitType==2)
    HasTM = (UnitType==0) | (UnitType==1)
    SlugMode = UnitType==1
}

runOnKeys(Driver,1) 
interval(150)
    
if(Control & FuelPump == 1){
    IsLead = 1
}
else{
    IsLead = 0
}

local HasSelector = CONFIGURATION_DATA[2,number]

if(IsLead == 0){
    if(!Control & !EngineRun & !GenField & !FuelPump){
        if(MU_Front_In[27,number] == 1){
            if(MU_Front_In[13,number] > 0){
                Reverser = (MU_Front_In[8,number] - MU_Front_In[9,number])
                DynamicNotch = MU_Front_In[21,number]
                DynamicsSetup = MU_Front_In[17,number]
                DynamicsPowerZone = MU_Front_In[24,number]
                DynamicUnlock = 0 
                Notch = MU_Front_In[15,number] + MU_Front_In[12,number] + MU_Front_In[7,number] + MU_Front_In[3,number]
                EngineRunLocal = MU_Front_In[16,number]
                GenFieldLocal = MU_Front_In[6,number]
                GroundRelayResetLocal = MU_Front_In[26,number]
                DBWarning = MU_Front_In[20,number]
                MUCompressor = MU_Front_In[22,number]
                MUSand = MU_Front_In[23,number]
            }
        }
        elseif(MU_Rear_In[27,number] == 1){
            if(MU_Rear_In[13,number] > 0){
                Reverser = -(MU_Rear_In[8,number] - MU_Rear_In[9,number])
                DynamicNotch = MU_Rear_In[21,number]
                DynamicsSetup = MU_Rear_In[17,number]
                DynamicsPowerZone = MU_Rear_In[24,number]
                DynamicUnlock = 0 
                Notch = MU_Rear_In[15,number] + MU_Rear_In[12,number] + MU_Rear_In[7,number] + MU_Rear_In[3,number]
                EngineRunLocal = MU_Rear_In[16,number]
                GenFieldLocal = MU_Rear_In[6,number]
                GroundRelayResetLocal = MU_Rear_In[26,number]
                DBWarning = MU_Rear_In[20,number]
                MUCompressor = MU_Rear_In[22,number]
                MUSand = MU_Rear_In[23,number]
            }
        }
        elseif(MU_Front_In[27,number] == 0 & MU_Rear_In[27,number] == 0){
            if(MU_Front_In[13,number] > MU_Rear_In[13,number]){
                Reverser = (MU_Front_In[8,number] - MU_Front_In[9,number])
                DynamicNotch = MU_Front_In[21,number]
                DynamicsSetup = MU_Front_In[17,number]
                DynamicsPowerZone = MU_Front_In[24,number]
                DynamicUnlock = 0 
                Notch = MU_Front_In[15,number] + MU_Front_In[12,number] + MU_Front_In[7,number] + MU_Front_In[3,number]
                EngineRunLocal = MU_Front_In[16,number]
                GenFieldLocal = MU_Front_In[6,number]
                GroundRelayResetLocal = MU_Front_In[26,number]
                DBWarning = MU_Front_In[20,number]
                MUCompressor = MU_Front_In[22,number]
                MUSand = MU_Front_In[23,number]
            }
            else{
                Reverser = -(MU_Rear_In[8,number] - MU_Rear_In[9,number])
                DynamicNotch = MU_Rear_In[21,number]
                DynamicsSetup = MU_Rear_In[17,number]
                DynamicsPowerZone = MU_Rear_In[24,number]
                DynamicUnlock = 0 
                Notch = MU_Rear_In[15,number] + MU_Rear_In[12,number] + MU_Rear_In[7,number] + MU_Rear_In[3,number]
                EngineRunLocal = MU_Rear_In[16,number]
                GenFieldLocal = MU_Rear_In[6,number]
                GroundRelayResetLocal = MU_Rear_In[26,number]
                DBWarning = MU_Rear_In[20,number]
                MUCompressor = MU_Rear_In[22,number]
                MUSand = MU_Rear_In[23,number]
            }
        }
        else{
            Notch = 0
            Reverser = 0
            DynamicNotch = 0
            DynamicsSetup = 0
            DynamicsPowerZone = 0
            DynamicUnlock = 0    
            EngineRunLocal = EngineRun
            GenFieldLocal = GenField
            MUCompressor = 0
            MUSand = 0
        }
    }
}
elseif(IsLead == 1){
    EngineRunLocal = EngineRun
    GenFieldLocal = GenField    
    MUCompressor = 0
    LocomotivePOS = 74
}

switch(Notch){
    case 0,
        ThrottleA = 0
        ThrottleB = 0
        ThrottleC = 0
        ThrottleD = 0
    break  
    case 1,
        ThrottleA = 1
        ThrottleB = 0
        ThrottleC = 0
        ThrottleD = 0
    break    
    case 2,
        ThrottleA = 2
        ThrottleB = 0
        ThrottleC = 0
        ThrottleD = 0
    break    
    case 3,
        ThrottleA = 2
        ThrottleB = 1
        ThrottleC = 0
        ThrottleD = 0
    break    
    case 4,
        ThrottleA = 2
        ThrottleB = 2
        ThrottleC = 0
        ThrottleD = 0
    break    
    case 5,
        ThrottleA = 2
        ThrottleB = 2
        ThrottleC = 1
        ThrottleD = 0
    break    
    case 6,
        ThrottleA = 2
        ThrottleB = 2
        ThrottleC = 2
        ThrottleD = 0
    break    
    case 7,
        ThrottleA = 2
        ThrottleB = 2
        ThrottleC = 2
        ThrottleD = 1
    break    
    case 8,
        ThrottleA = 2
        ThrottleB = 2
        ThrottleC = 2
        ThrottleD = 2
    break    
}

if(Reverser == 1){
    MUReverserFW = 1
    MUReverserBW = 0  
}
elseif(Reverser == 0){
    MUReverserFW = 0
    MUReverserBW = 0
}
elseif(Reverser == -1){
    MUReverserFW = 0
    MUReverserBW = 1  
}

if(!IsLead){
    if((MU_Front_In[13,number] > 0) | (MU_Rear_In[13,number] > 0)){
        LocomotivePOS = (MU_Front_In[13,number]-1)
        LocomotivePOS = (MU_Rear_In[13,number]-1)
    }
    
    local Motors = LOCOMOTIVE_PROCESSOR[18,number]
    local Generator = LOCOMOTIVE_PROCESSOR[19,number]
    
    if(SlugMode){
        if(MU_Front_In[13,number] > MU_Rear_In[13,number]){
            local LastLocoMotors = MU_Rear_In[18,number]
            ConsistMotors = HasTM ? (LastLocoMotors+Motors) : LastLocoMotors
        }
        else{
            local LastLocoMotors = MU_Front_In[18,number]
            ConsistMotors = HasTM ? (LastLocoMotors+Motors) : LastLocoMotors       
        }
    }
    else{
        if(MU_Front_In[13,number] > MU_Rear_In[13,number]){
            if(changed(MU_Rear_In[18,number])){
                local LastLocoMotors = MU_Rear_In[18,number]
                ConsistMotors = HasTM ? (LastLocoMotors+Motors) : LastLocoMotors
            }
        }
        else{
            if(changed(MU_Front_In[18,number])){
                local LastLocoMotors = MU_Front_In[18,number]
                ConsistMotors = HasTM ? (LastLocoMotors+Motors) : LastLocoMotors    
            }    
        }
    }
    
    if(HasPM & !HasTM){
        GeneratorMU = Generator
    }
    else{
        if(MU_Front_In[13,number] > MU_Rear_In[13,number]){
            GeneratorMU = MU_Rear_In[19,number]
        }
        else{
            GeneratorMU = MU_Front_In[19,number]      
        }
    }
    
    if(!HasPM & HasTM){
        if(MU_Front_In[19,number] > 0){
            GeneratorOut = MU_Front_In[19,number]
        }
        elseif(MU_Rear_In[19,number] > 0){
            GeneratorOut = MU_Rear_In[19,number]
        }
    }
}
else{
    local Motors = LOCOMOTIVE_PROCESSOR[18,number]
    local Generator = LOCOMOTIVE_PROCESSOR[19,number]
    
    if(HasPM & !HasTM){
        GeneratorMU = Generator
    }
    else{
        if(MU_Front_In[13,number] > MU_Rear_In[13,number]){
            GeneratorMU = MU_Rear_In[19,number]
        }
        else{
            GeneratorMU = MU_Front_In[19,number]      
        }
    }
    
    if(changed(MU_Front_In[18,number])){
        ConsistMotors = MU_Front_In[18,number]
    }
    
    if(changed(MU_Rear_In[18,number])){
        ConsistMotors = MU_Rear_In[18,number]
    }
}

MU_Front_Out = array("opencontrol",LOCOMOTIVE_PROCESSOR[15,number],ThrottleD,0,0,GenFieldLocal,ThrottleC,MUReverserFW,MUReverserBW,
0,0,ThrottleB,LocomotivePOS,0,ThrottleA,EngineRunLocal,DynamicsSetup,ConsistMotors,GeneratorMU,DBWarning,DynamicNotchLocal,LOCOMOTIVE_AIRBRAKE_DATA[10,number],Sand,DynamicsPowerZone,0,GroundRelayResetLocal,IsLead)

MU_Rear_Out = array("opencontrol",LOCOMOTIVE_PROCESSOR[15,number],ThrottleD,0,0,GenFieldLocal,ThrottleC,MUReverserFW,MUReverserBW,
0,0,ThrottleB,LocomotivePOS,0,ThrottleA,EngineRunLocal,DynamicsSetup,ConsistMotors,GeneratorMU,DBWarning,DynamicNotchLocal,LOCOMOTIVE_AIRBRAKE_DATA[10,number],Sand,DynamicsPowerZone,0,GroundRelayResetLocal,IsLead)


if(IsLead == 1){
    if(BatteryKnife){
        if(Control){
            if(FuelPump){
                Notch = NotchLocal
            }
            Reverser = ReverserLocal
            DynamicNotch = DynamicNotchLocal
            DynamicsSetup = DynamicsSetupLocal
            DynamicsPowerZone = DynamicsPowerZoneLocal
            DynamicUnlock = DynamicUnlockLocal
        }    
        elseif(!Control){
            if(!FuelPump){
                Notch = 0
            }
            Reverser = 0
            DynamicNotch = 0
            DynamicsSetup = 0
            DynamicsPowerZone = 0
            DynamicUnlock = 0
        }    
    }
    elseif(!BatteryKnife){
        Notch = 0
        Reverser = 0
        DynamicNotch = 0
        DynamicsSetup = 0
        DynamicsPowerZone = 0
        DynamicUnlock = 0
    }    
}

if((ENGINE_SOUND_DATA[11,number] | ENGINE_SOUND_DATA[12,number]) == 1){
    Isolation = 1
}
elseif((ENGINE_SOUND_DATA[11,number] | ENGINE_SOUND_DATA[12,number]) == 0){
    Isolation = 0    
}

if(GroundRelayReset){
    GroundRelayResetLocal = 1
}
else{
    GroundRelayResetLocal = GroundRelayResetLocal    
}

if(LOCOMOTIVE_PROCESSOR[16,number]){
    DBWarning = 1        
}
elseif(LOCOMOTIVE_PROCESSOR[16,number] == 0){
    DBWarning = 0  
}

CONTROL_STAND_DATA = array(IncreaseTrainBrake,DecreaseTrainBrake,BrakeNotch,AutomaticPressureSet,Suppression,Emergency,BrakeCutout,IncreaseLocoBrake,DecreaseLocoBrake,Independent_Bail,EmergencyBrake,
DynamicNotch,DynamicsSetup,DynamicsPowerZone,DynamicUnlock,Reverser,ReverserRemoved,Notch,BatteryKnife,EngineRunLocal,GenFieldLocal,FuelPump,Control,Isolation,GroundRelayResetLocal,HandleOff,MUCompressor,
IsLead,SelectorNotch,Sand,Sander,ConsistMotors,MUSand,GeneratorOut,HEP_Up,HEP_Down)

local Driver = noentity()
local PodDriver = Pod:driver()
Driver = Pod:driver()
if(Driver & !DriverQ){
    DriverQ = 1
    runOnKeys(Driver,1)
}elseif(!Driver & DriverQ){
    DriverQ = 0
    runOnKeys(DriverOld,0)
}
DriverOld = Driver

if(Driver!=noentity()){
    if(keyClk(Driver)){
        local Shifting = Driver:keyPressed(CONFIGURATION_DATA[1,string])
        UseButton = Driver:keyPressed(Controls["UseButton",string]) & (Routing["UseButton",number] ? Shifting : !Shifting)
        
        if(!UseButton){
            local RF = UsingRearSeat ? "ReverserB" : "ReverserF"
            local RB = UsingRearSeat ? "ReverserF" : "ReverserB"
            
            ReverserF = Driver:keyPressed(Controls[RF,string]) & (Routing[RF,number] ? Shifting : !Shifting)
            ReverserB = Driver:keyPressed(Controls[RB,string]) & (Routing[RB,number] ? Shifting : !Shifting)
            
            IncreaseThrottle = Driver:keyPressed(Controls["IncreaseThrottle",string]) & (Routing["IncreaseThrottle",number] ? Shifting : !Shifting)
            DecreaseThrottle = Driver:keyPressed(Controls["DecreaseThrottle",string]) & (Routing["DecreaseThrottle",number] ? Shifting : !Shifting)
            
            IncreaseDynamics = Driver:keyPressed(Controls["IncreaseDynamics",string]) & (Routing["IncreaseDynamics",number] ? Shifting : !Shifting)
            DecreaseDynamics = Driver:keyPressed(Controls["DecreaseDynamics",string]) & (Routing["DecreaseDynamics",number] ? Shifting : !Shifting)
            
            IncreaseTrainBrake = Driver:keyPressed(Controls["IncreaseTrainBrake",string]) & (Routing["IncreaseTrainBrake",number] ? Shifting : !Shifting)
            DecreaseTrainBrake = Driver:keyPressed(Controls["DecreaseTrainBrake",string]) & (Routing["DecreaseTrainBrake",number] ? Shifting : !Shifting)
            
            IncreaseLocoBrake = Driver:keyPressed(Controls["IncreaseLocoBrake",string]) & (Routing["IncreaseLocoBrake",number] ? Shifting : !Shifting)
            DecreaseLocoBrake = Driver:keyPressed(Controls["DecreaseLocoBrake",string]) & (Routing["DecreaseLocoBrake",number] ? Shifting : !Shifting)
            Independent_Bail = Driver:keyPressed(Controls["BailLocoBrake",string]) & (Routing["BailLocoBrake",number] ? Shifting : !Shifting)
            
            HandBrake = Driver:keyPressed(Controls["HandBrake",string]) & (Routing["HandBrake",number] ? Shifting : !Shifting)
            Sander = Driver:keyPressed(Controls["Sander",string]) & (Routing["Sander",number] ? Shifting : !Shifting)
            
            SelectorUp = Driver:keyPressed(Controls["SelectorUp",string]) & (Routing["SelectorUp",number] ? Shifting : !Shifting)
            SelectorDown = Driver:keyPressed(Controls["SelectorDown",string]) & (Routing["SelectorDown",number] ? Shifting : !Shifting)
            
            ManualEmerg = Driver:keyPressed(Controls["EmergBrake",string]) & (Routing["EmergBrake",number] ? Shifting : !Shifting)
        }
    }
}

if(Horn == 0.5 & !HornPullcord){
    ControlStand:setBodygroup(6,1)    
}
elseif(Horn == 1 & !HornPullcord){
    ControlStand:setBodygroup(6,2)    
}
elseif(HornPullcord == 1 & !HornPullcord){
    ControlStand:setBodygroup(6,3)    
}
elseif(Horn == 0 & !HornPullcord){
    ControlStand:setBodygroup(6,0)    
}

if(InsertReverser){
    if(NotchLocal == 0 & DynamicNotchLocal == 0){
        if(changed(ReverserF)&ReverserF){
            if(ReverserLocal<1){
                ReverserLocal += 1  
            }
        }
        elseif(changed(ReverserB)&ReverserB){
            if(ReverserLocal>-1){
                ReverserLocal -= 1  
            }
        }
    }
}

if(InsertReverser){
    ControlStand:setBodygroup(1,2+ReverserLocal)
    ReverserRemoved = 0
}
elseif(!InsertReverser & ReverserLocal!=0){
    ControlStand:setBodygroup(1,2+ReverserLocal)    
    ReverserRemoved = 0
}
elseif(!InsertReverser & ReverserLocal == 0){
    ControlStand:setBodygroup(1,0)   
    ReverserRemoved = 1 
}


if(HasSelector == 1){
    if(changed(SelectorUp)&SelectorUp){
        if(SelectorNotch<4){
            SelectorNotch+=1
        }
    } 
    elseif(changed(SelectorDown)&SelectorDown){
        if(SelectorNotch>-1){
            SelectorNotch-=1
        }
    } 

    if(changed(SelectorUp)&SelectorUp){
        SelectorMove = 2
    }
    elseif(changed(SelectorDown)&SelectorDown){
        SelectorMove = 0
    }

    ControlStand:setBodygroup(3,(SelectorNotch == -1 ? 5 : SelectorNotch))
    ControlStand:setBodygroup(9,SelectorMove)
    
    if(SelectorMove != 1){
        SelectorMove = 1    
    }
}

if(HasSelector == 0){
    if(DynamicNotchLocal == 0){
        if(changed(IncreaseThrottle & !UnNotchThrottleF)&IncreaseThrottle & !UnNotchThrottleF){
            timer("throttlemoveF",400)    
        }
        elseif(changed(DecreaseThrottle & !UnNotchThrottleB)&DecreaseThrottle & !UnNotchThrottleB){
            timer("throttlemoveB",400)    
        }
        
        if(clk("throttlemoveF") & IncreaseThrottle){
            UnNotchThrottleF = 1   
            stoptimer("throttlemoveF")
        }
        elseif(clk("throttlemoveB") & DecreaseThrottle){
            UnNotchThrottleB = 1   
            stoptimer("throttlemoveB")
        }
        
        if(!IncreaseThrottle & UnNotchThrottleF){
            UnNotchThrottleF = 0    
        }
        elseif(!DecreaseThrottle & UnNotchThrottleB){
            UnNotchThrottleB = 0    
        }
        
        if(!UnNotchThrottleF & !UnNotchThrottleB){
            if(changed(IncreaseThrottle)&IncreaseThrottle){
                if(NotchLocal<NumberOfNotches){
                    NotchLocal += 1    
                } 
            }
            elseif(changed(DecreaseThrottle)&DecreaseThrottle){
                if(NotchLocal>0){
                    NotchLocal -= 1    
                }
            }
        }
        else{#if(UnNotchThrottleF | UnNotchThrottleB){
            if(UnNotchThrottleF){
                if(IncreaseThrottle){
                    if(NotchLocal<NumberOfNotches){
                        NotchLocal += 1    
                    } 
                }
            }
            elseif(UnNotchThrottleB){
                if(DecreaseThrottle){
                    if(NotchLocal>0){
                        NotchLocal -= 1    
                    }
                }
            }
        }
    }
}
elseif(HasSelector == 1){
    if(changed(IncreaseThrottle & !UnNotchThrottleF)&IncreaseThrottle & !UnNotchThrottleF){
        timer("throttlemoveF",400)    
    }
    elseif(changed(DecreaseThrottle & !UnNotchThrottleB)&DecreaseThrottle & !UnNotchThrottleB){
        timer("throttlemoveB",400)    
    }
    
    if(clk("throttlemoveF") & IncreaseThrottle){
        UnNotchThrottleF = 1   
        stoptimer("throttlemoveF")
    }
    elseif(clk("throttlemoveB") & DecreaseThrottle){
        UnNotchThrottleB = 1   
        stoptimer("throttlemoveB")
    }
    
    if(!IncreaseThrottle & UnNotchThrottleF){
        UnNotchThrottleF = 0    
    }
    elseif(!DecreaseThrottle & UnNotchThrottleB){
        UnNotchThrottleB = 0    
    }
    
    if(!UnNotchThrottleF & !UnNotchThrottleB){
        if(changed(IncreaseThrottle)&IncreaseThrottle){
            if(NotchLocal<NumberOfNotches){
                NotchLocal += 1    
            } 
        }
        elseif(changed(DecreaseThrottle)&DecreaseThrottle){
            if(NotchLocal>0){
                NotchLocal -= 1    
            }
        }
    }
    else{#if(UnNotchThrottleF | UnNotchThrottleB){
        if(UnNotchThrottleF){
            if(IncreaseThrottle){
                if(NotchLocal<NumberOfNotches){
                    NotchLocal += 1    
                } 
            }
        }
        elseif(UnNotchThrottleB){
            if(DecreaseThrottle){
                if(NotchLocal>0){
                    NotchLocal -= 1    
                }
            }
        }
    }
}

if(HasSelector == 0){
    if(ReverserLocal!=0){
        if(NotchLocal == 0){
            if(changed(IncreaseDynamics)&IncreaseDynamics){
                if(DynamicNotchLocal<2 & DynamicsPowerZoneLocal == 0){
                    DynamicNotchLocal += 1
                }
            }
            if(changed(DecreaseDynamics)&DecreaseDynamics){
                if(DynamicNotchLocal>0 & DynamicsPowerZoneLocal == 0){
                    DynamicNotchLocal -= 1
                }
            }
            if(DynamicNotchLocal == 2){
                DynamicUnlockLocal = 1
                if(IncreaseDynamics){
                    if(DynamicsPowerZoneLocal<80){
                        DynamicsPowerZoneLocal += 1 
                    }
                }
                elseif(DecreaseDynamics){
                    if(DynamicsPowerZoneLocal>0){
                        DynamicsPowerZoneLocal -= 1 
                    }
                }
            }
            if(DynamicNotchLocal>0){
                DynamicsSetupLocal = 1    
            }
            elseif(DynamicNotchLocal == 0){
                DynamicsSetupLocal = 0    
            }
            
            if(DynamicsPowerZoneLocal == 0){
                DynamicUnlockLocal = 0   
            }
        }   
    }
}
elseif(HasSelector == 1){
    if(SelectorNotch == -1){
        DynamicUnlockLocal = 0
        DynamicsPowerZoneLocal = (NotchLocal*10)
        DynamicNotchLocal = 2

        if(DynamicNotchLocal>0){
            DynamicsSetupLocal = 1    
        }
        elseif(DynamicNotchLocal == 0){
            DynamicsSetupLocal = 0    
        }

        if(DynamicsPowerZoneLocal == 0){
            DynamicUnlockLocal = 0   
        }  
    }
    elseif(SelectorNotch>-1){
        DynamicUnlockLocal = 0
        DynamicsPowerZoneLocal = 0
        DynamicNotchLocal = 0
    }
}

if(HasSelector == 0){
    ControlStand:setBodygroup(2,NotchLocal)
    ControlStand:setBodygroup(3,3+DynamicNotchLocal+((DynamicsPowerZoneLocal/10)-3))    
}
elseif(HasSelector == 1){
    ControlStand:setBodygroup(2,NotchLocal)  
}


if(CONFIGURATION_DATA[22,number]<2){
    if(ServiceZone==20 & DecreaseTrainBrake & BrakeNotch == 2){
        InServiceZone = 1
    }

    if(!InServiceZone){
        if(changed(IncreaseTrainBrake & BrakeNotch<5)&IncreaseTrainBrake & BrakeNotch<5){
            BrakeNotch += 1    
        }
        
        if(changed(DecreaseTrainBrake & BrakeNotch>0)&DecreaseTrainBrake & BrakeNotch>0){
            BrakeNotch -= 1   
        }
    }

    if(BrakeNotch == 2){
        InServiceZone = 1
        
        if(IncreaseTrainBrake & ServiceZone<20){
            ServiceZone += 1
        }
        if(DecreaseTrainBrake & ServiceZone>0){
            ServiceZone -= 1
        }
    }

    if(ServiceZone==20){
        InServiceZone = 0
    }
    elseif(ServiceZone==0){
        InServiceZone = 0
    }
}
elseif(CONFIGURATION_DATA[22,number] == 2){
    if(changed(IncreaseTrainBrake & BrakeNotch<4)&IncreaseTrainBrake & BrakeNotch<4){
        BrakeNotch += 1    
    }
    
    if(changed(DecreaseTrainBrake & BrakeNotch>0)&DecreaseTrainBrake & BrakeNotch>0){
        BrakeNotch -= 1   
    }
}

if(CONFIGURATION_DATA[22,number]<2){
    if(changed(ManualEmerg)&ManualEmerg){
        BrakeNotch = 5      
        AutomaticPressureSet = 0
        LocalEmergency = 1
        Suppression = 1
        Emergency = 1
        HandleOff = 0
        EmergencyBrake = 1
        EmergencyBrakeHiss = 1
    }
    
    switch(BrakeNotch){
        case 0,
            ControlStand:setBodygroup(4,0)
            AutomaticPressureSet = 90
            Suppression = 0
            HandleOff = 0
        break
        case 1,
            ControlStand:setBodygroup(4,1)
            AutomaticPressureSet = 80
            Suppression = 0
            HandleOff = 0
        break
        case 2,
            ControlStand:setBodygroup(4,2+round((ServiceZone*(50/20))/10))
            AutomaticPressureSet = 80-ServiceZone
            Suppression = 0
            HandleOff = 0
        break
        case 3,
            ControlStand:setBodygroup(4,8)
            if(!LocalEmergency){
                Suppression = 1
                AutomaticPressureSet = 0
            }
            HandleOff = 0
        break
        case 4,
            ControlStand:setBodygroup(4,10)
            Suppression = 0
            AutomaticPressureSet = 0
            HandleOff = 1
        break
        case 5,
            ControlStand:setBodygroup(4,11)
            AutomaticPressureSet = 0
            LocalEmergency = 1
            Suppression = 1
            Emergency = 1
            HandleOff = 0
            EmergencyBrake = 1
            EmergencyBrakeHiss = 1
        break
    }   
}
elseif(CONFIGURATION_DATA[22,number] == 2){
    if(changed(ManualEmerg)&ManualEmerg){
        BrakeNotch = 4 
        AutomaticPressureSet = 0
        LocalEmergency = 1
        Suppression = 1
        Emergency = 1
        HandleOff = 0   
        EmergencyBrake = 1 
        EmergencyBrakeHiss = 1 
    }
    
    switch(BrakeNotch){
        case 0,
            ControlStand:setBodygroup(4,0)
            AutomaticPressureSet = 90
            Suppression = 0
        break
        case 1,
            ControlStand:setBodygroup(4,1)
            AutomaticPressureSet = AutomaticPressureSet
            Suppression = 0
        break
        case 2,
            ControlStand:setBodygroup(4,2)
            AutomaticPressureSet = AutomaticPressureSet
            Suppression = 0
        break
        case 3,
            ControlStand:setBodygroup(4,8)
            AutomaticPressureSet = 60
            Suppression = 0
        break
        case 4,
            ControlStand:setBodygroup(4,11)
            AutomaticPressureSet = 0
            LocalEmergency = 1
            Suppression = 1
            Emergency = 1
            EmergencyBrake = 1
            EmergencyBrakeHiss = 1
        break
    }
}

if(EmergencyBrakeHiss){
    if(changed(BrakeNotch)){
        EmergencyBrakeHiss = 0    
    }  
}

if(IncreaseLocoBrake & LocoBrakePOS<65){
    LocoBrakePOS += 2   
}
elseif(DecreaseLocoBrake & LocoBrakePOS>0){
    LocoBrakePOS -= 2    
}

if(LocoBrakePOS<0){
LocoBrakePOS = 0   
}

if(!Independent_Bail){
    ControlStand:setBodygroup(5,1+LocoBrakePOS/10)
}
elseif(Independent_Bail){
    ControlStand:setBodygroup(5,0)
    if(LocoBrakePOS>LOCOMOTIVE_AIRBRAKE_DATA[4,number]){
        LocoBrakePOS = LOCOMOTIVE_AIRBRAKE_DATA[4,number]
    }
}

if(CONFIGURATION_DATA[22,number]<2){
    if(BrakeCutout>0){ 
        if(!EmergencyBrakeHiss){
            
            if(ServiceHiss){
                if(changed(BrakeNotch & IncreaseTrainBrake)&BrakeNotch & IncreaseTrainBrake){
                    ControlStand:soundPlay("servicehiss",0,CONFIGURATION_DATA[14,string])
                    soundStop("servicerelease",1)
                    timer("servicehissRLA",7000)
                    ServiceHiss = 0
                }
            }
            if(changed(clk("servicehissRLA"))&clk("servicehissRLA")){
                ServiceHiss = 1 
                stoptimer("servicehissRLA")
            }

            if(ServiceRelease){
                if(changed(BrakeNotch & DecreaseTrainBrake)&BrakeNotch & DecreaseTrainBrake){
                    ControlStand:soundPlay("servicerelease",0,CONFIGURATION_DATA[15,string])
                    soundStop("servicehiss",1)
                    timer("servicehissRLB",7000)
                    ServiceRelease = 0
                }
            }
            if(changed(clk("servicehissRLB"))&clk("servicehissRLB")){
                ServiceRelease = 1
                stoptimer("servicehissRLB")
            }
        }
        elseif(EmergencyBrakeHiss){
            if(changed(EmergencyBrakeHiss)&EmergencyBrakeHiss){
                ControlStand:soundPlay("emrgapply",0,CONFIGURATION_DATA[16,string])   
                EmergRelease = 1
            }    
        }

        if(EmergRelease == 1){
            if(changed(BrakeNotch<5)&BrakeNotch<5){
                EmergRelease = 0
            }
        }
        
        if(changed(EmergRelease)&!EmergRelease){
            ControlStand:soundPlay("emrgrelease",0,CONFIGURATION_DATA[17,string])
        } 
    }
}
elseif(CONFIGURATION_DATA[22,number] == 2){
    if(BrakeCutout>0){ 
        if(!EmergencyBrakeHiss){
            
            if(ServiceHiss){
                if(changed(BrakeNotch & IncreaseTrainBrake)&BrakeNotch & IncreaseTrainBrake){
                    ControlStand:soundPlay("servicehiss",0,CONFIGURATION_DATA[14,string])
                    soundStop("servicerelease",1)
                    timer("servicehissRLA",7000)
                    ServiceHiss = 0
                }
            }
            if(changed(clk("servicehissRLA"))&clk("servicehissRLA")){
                ServiceHiss = 1 
                stoptimer("servicehissRLA")
            }

            if(ServiceRelease){
                if(changed(BrakeNotch & DecreaseTrainBrake)&BrakeNotch & DecreaseTrainBrake){
                    ControlStand:soundPlay("servicerelease",0,CONFIGURATION_DATA[15,string])
                    soundStop("servicehiss",1)
                    timer("servicehissRLB",7000)
                    ServiceRelease = 0
                }
            }
            if(changed(clk("servicehissRLB"))&clk("servicehissRLB")){
                ServiceRelease = 1
                stoptimer("servicehissRLB")
            }
        }
        elseif(EmergencyBrakeHiss){
            if(changed(EmergencyBrakeHiss)&EmergencyBrakeHiss){
                ControlStand:soundPlay("emrgapply",0,CONFIGURATION_DATA[16,string])   
                EmergRelease = 1
            }    
        }

        if(EmergRelease == 1){
            if(changed(BrakeNotch<4)&BrakeNotch<4){
                EmergRelease = 0
            }
        }
        
        if(changed(EmergRelease)&!EmergRelease){
            ControlStand:soundPlay("emrgrelease",0,CONFIGURATION_DATA[17,string])
        } 
    }
}

if(changed(Independent_Bail)&Independent_Bail){
    ControlStand:soundPlay("indbailoff",0,CONFIGURATION_DATA[20,string])
}
elseif(changed(Independent_Bail)&!Independent_Bail){
    ControlStand:soundPlay("indbailon",0,CONFIGURATION_DATA[21,string])    
}

if(CONFIGURATION_DATA[23,number] == 0){
    if(!Independent_Bail){
        if(LOCOMOTIVE_AIRBRAKE_DATA[4,number]<IndFeed){
            if(IndHiss){
                if(changed(IncreaseLocoBrake)&IncreaseLocoBrake){
                    ControlStand:soundPlay("indhiss",0,CONFIGURATION_DATA[18,string])
                    soundStop("indrelease",1)
                    timer("indhissRLA",1000)
                    IndHiss = 0
                }
            }
            if(changed(clk("indhissRLA"))&clk("indhissRLA")){
                IndHiss = 1 
                stoptimer("indhissRLA")
            }
        }
        if(LOCOMOTIVE_AIRBRAKE_DATA[4,number]>0){ 
            if(IndRelease){
                if(changed(DecreaseLocoBrake)&DecreaseLocoBrake){
                    ControlStand:soundPlay("indrelease",0,CONFIGURATION_DATA[19,string])
                    soundStop("indhiss",1)
                    timer("indhissRLB",1000)
                    IndRelease = 0
                }
            }
            if(changed(clk("indhissRLB"))&clk("indhissRLB")){
                IndRelease = 1
                stoptimer("indhissRLB")
            }
        }
    }
}
elseif(CONFIGURATION_DATA[23,number] == 1){
    if(!Independent_Bail){
        if(LOCOMOTIVE_AIRBRAKE_DATA[7,number]!=1){
            if(LOCOMOTIVE_AIRBRAKE_DATA[4,number]<IndFeed){
                if(IndHiss){
                    if(changed(IncreaseLocoBrake)&IncreaseLocoBrake){
                        ControlStand:soundPlay("indhiss",0,CONFIGURATION_DATA[18,string])
                        soundStop("indrelease",1)
                        timer("indhissRLA",1000)
                        IndHiss = 0
                    }
                }
                if(changed(clk("indhissRLA"))&clk("indhissRLA")){
                    IndHiss = 1 
                    stoptimer("indhissRLA")
                }
            }
            if(LOCOMOTIVE_AIRBRAKE_DATA[4,number]>0){ 
                if(IndRelease){
                    if(changed(DecreaseLocoBrake)&DecreaseLocoBrake){
                        ControlStand:soundPlay("indrelease",0,CONFIGURATION_DATA[19,string])
                        soundStop("indhiss",1)
                        timer("indhissRLB",1000)
                        IndRelease = 0
                    }
                }
                if(changed(clk("indhissRLB"))&clk("indhissRLB")){
                    IndRelease = 1
                    stoptimer("indhissRLB")
                }
            }
        }
    }
}

if(!ReverserRemoved){
    if(changed(ReverserLocal == 1)&ReverserLocal == 1){
        ControlStand:soundPlay("rev",0,CONFIGURATION_DATA[3,string])   
    }
    elseif(changed(ReverserLocal == 0)&ReverserLocal == 0){
        ControlStand:soundPlay("revn",0,CONFIGURATION_DATA[4,string])      
    }
    elseif(changed(ReverserLocal == -1)&ReverserLocal == -1){
        ControlStand:soundPlay("rev",0,CONFIGURATION_DATA[5,string])  
    }
}

if(HasSelector == 1){
    if(changed(SelectorUp == 1)&SelectorUp == 1){
        ControlStand:soundPlay("selector",0,CONFIGURATION_DATA[50,string])   
    }
    elseif(changed((SelectorDown & SelectorUp) == 0)&(SelectorDown & SelectorUp) == 0){
        ControlStand:soundPlay("selectorn",0,CONFIGURATION_DATA[51,string])      
    }
    elseif(changed(SelectorDown == 1)&SelectorDown == 1){
        ControlStand:soundPlay("selector",0,CONFIGURATION_DATA[52,string])  
    }   
}
elseif(HasSelector == 0){
    if(DynamicNotchLocal<2){
        if(changed(IncreaseDynamics)&IncreaseDynamics){
            ControlStand:soundPlay("dynamicsnotch",0,CONFIGURATION_DATA[8,string])
        }
        elseif(changed(DecreaseDynamics)&DecreaseDynamics){
            ControlStand:soundPlay("dynamicsnotch",0,CONFIGURATION_DATA[9,string])
        }
    }    
}

if(IncreaseThrottle){
    if(changed(NotchLocal)&NotchLocal){
        ControlStand:soundPlay("throttle",0,CONFIGURATION_DATA[6,string])
    }
}
elseif(DecreaseThrottle){
    if(changed(NotchLocal)&NotchLocal){
        ControlStand:soundPlay("throttle",0,CONFIGURATION_DATA[7,string])
    }
}

if(changed(LocalEmergency & BrakeNotch<2)&LocalEmergency & BrakeNotch<2){
    timer("emrgtimeout",60000)    
    EmergencyBrake = 0
}

if(clk("emrgtimeout")){
    LocalEmergency = 0
    stoptimer("emrgtimeout")
}

if(LocalEmergency == 0 & BrakeNotch<2){
    Emergency = 0
}
